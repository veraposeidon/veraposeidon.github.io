<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SHEN&#39;s DevNotes</title>
  
  <subtitle>学习笔记，编程技巧，效率工具</subtitle>
  <link href="https://shenxiaohai.me/atom.xml" rel="self"/>
  
  <link href="https://shenxiaohai.me/"/>
  <updated>2023-04-02T11:33:44.000Z</updated>
  <id>https://shenxiaohai.me/</id>
  
  <author>
    <name>xiaohai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>约定式提交的规范和工具</title>
    <link href="https://shenxiaohai.me/conventional-commit-specification-tool/"/>
    <id>https://shenxiaohai.me/conventional-commit-specification-tool/</id>
    <published>2022-04-20T22:01:05.000Z</published>
    <updated>2023-04-02T11:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>约定式提交（<a href="https://www.conventionalcommits.org/en/v1.0.0/">conventional commits</a>）是一种针对 commit message 的约定，用于创建清晰的提交历史，有助于自动生成CHANGELOG，同时与<a href="https://semver.org/lang/zh-CN/">语义化版本</a>的格式保持一致。</p><p>本文分三部分：1. 为何使用约定式提交；2. 约定式提交的规范什么；3. 有哪些工具可以用于约束和利用约定式提交。</p><h1 id="为何使用约定式提交"><a href="#为何使用约定式提交" class="headerlink" title="为何使用约定式提交"></a>为何使用约定式提交</h1><h2 id="为了自动生成CHANGELOG"><a href="#为了自动生成CHANGELOG" class="headerlink" title="为了自动生成CHANGELOG"></a>为了自动生成CHANGELOG</h2><ul><li>无论是在发布版本时、还是在每次提交commit时，手动编写CHANGELOG总是令人心烦的。自动化该流程能提高幸福指数。</li><li>在不强调commit规范的前提下，去强调CHANGELOG的准确性，我认为是靠不住的。在记录时、迭代编辑时、合并分支时都有可能丢失文档内的信息。而基于commit生成CHANGELOG则大大降低了这个可能性，毕竟commit可不能随随便便就搞丢。</li><li>自动生成CHANGELOG应该作为CI&#x2F;CD的一部分。</li></ul><h2 id="基于提交的类型，自动决定语义化的版本变更"><a href="#基于提交的类型，自动决定语义化的版本变更" class="headerlink" title="基于提交的类型，自动决定语义化的版本变更"></a>基于提交的类型，自动决定语义化的版本变更</h2><p><a href="https://semver.org/lang/zh-CN/">语义化版本 2.0.0</a> 的规范如下：</p><blockquote><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ol><p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p></blockquote><p>理论上，我们只要在commit信息上标注当前提交类型为 feature、bugFix、BREAKING CHANGE等，在发布版本时，就能依据这段提交历史中的提交类型来确定要升的是MAJOR、MINOR还是PATCH。</p><h1 id="约定式提交的规范"><a href="#约定式提交的规范" class="headerlink" title="约定式提交的规范"></a>约定式提交的规范</h1><h2 id="commit-message-的结构"><a href="#commit-message-的结构" class="headerlink" title="commit message 的结构"></a>commit message 的结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;[optional scope]: &lt;description&gt;</span><br><span class="line"></span><br><span class="line">[optional body]</span><br><span class="line"></span><br><span class="line">[optional footer(s)]</span><br></pre></td></tr></table></figure><p>commit 内的 <code>type</code>等元素用于表示当前提交的意图：</p><ul><li>type &#x3D;<code>fix</code>，表示修复bug，跟语义化版本的修订号（PATCH）对应。</li><li>type &#x3D;<code>feat</code>，表示新增feature，跟语义化版本的次版本号（MINOR）对应。</li><li>footer 内包含<code>BREAKING CHANGE</code>，或者在<code>&lt;type&gt;(scope)</code>后存在 <code>!</code>，表示出现了破坏性的变更，跟语义化版本的主版本号（MAJOR）对应。</li><li>除了 fix、feat外，还可以按需定义如 build、ci、docs、refactor 等 commit type。</li></ul><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ul><li><p>存在 BREAKING CHANGE表示破坏性变更：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feat: allow provided config object to extend other configs</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: `extends` key in config file is now used for extending other config files</span><br></pre></td></tr></table></figure></li><li><p>存在 ! 表示破坏性变更：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat!: send an email to the customer when a product is shipped</span><br></pre></td></tr></table></figure></li><li><p>包含影响范围的提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat(lang): add polish language</span><br></pre></td></tr></table></figure></li></ul><p>更多详细的规范可以阅读：<a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a>。</p><h1 id="面向约定式提交的自动化工具"><a href="#面向约定式提交的自动化工具" class="headerlink" title="面向约定式提交的自动化工具"></a>面向约定式提交的自动化工具</h1><h2 id="commitizen-替换-git-commit"><a href="#commitizen-替换-git-commit" class="headerlink" title="commitizen 替换 git commit"></a><strong><a href="https://github.com/commitizen/cz-cli">commitizen</a></strong> 替换 git commit</h2><p>Commitizen 在创建提交时，可以提示你填写符合 conventional commits 约定的必要字段。</p><p>下面介绍全局安装使用的方法，项目级安装的方式可以看<a href="https://github.com/commitizen/cz-cli/blob/master/README.md">README文档</a>。</p><p><a href="https://github.com/conventional-changelog/conventional-changelog">cz-conventional-changelog</a> 是符合约定式提交的一种规范，你也可以参考它制定自己的规范，比如可以指定有哪些提交类型。</p><p><strong>Install</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27;</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure><p><strong>Usage</strong></p><p> <code>git commit</code>  替换为 <code>cz</code>或者<code>git cz</code>，工具会展示交互式的界面，按照提示填写commit message。</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678510949/blog/daguwg6a5rzbacidrjwx.png" alt="commitizen"></p><hr><h2 id="commitlint-对commit-message进行lint"><a href="#commitlint-对commit-message进行lint" class="headerlink" title="commitlint 对commit message进行lint"></a><strong><a href="https://github.com/conventional-changelog/commitlint">commitlint</a></strong> 对commit message进行lint</h2><p>使用commitlint 对 commit message进行lint，判断其是否符合 conventional commits 的约定，对于不满足的拒绝提交。</p><ul><li>commitlint也需要对应conventional commits的配置项，这里使用的是 <code>@commitlint/config-conventional</code>。</li><li>commitlint需要使用 <code>commit-msg hook</code>，官方使用的是husky。</li></ul><p><strong>Install</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 @commitlint</span></span><br><span class="line">npm install -g @commitlint/cli @commitlint/config-conventional</span><br><span class="line"></span><br><span class="line"><span class="comment"># commitlint.config.js 放在项目目录下</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install husky</span></span><br><span class="line">npm install husky --save-dev</span><br><span class="line"><span class="comment"># Active hooks</span></span><br><span class="line">npx husky install</span><br><span class="line"><span class="comment"># Add hook</span></span><br><span class="line">npx husky add .husky/commit-msg <span class="string">&#x27;npx --no -- commitlint --edit $1&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>Usage</strong></p><p><img data-src="https://github.com/conventional-changelog/commitlint/raw/master/docs/assets/commitlint.svg" alt="commintlint"></p><p>创建一个提交进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;foo: this will fail&quot;</span><br><span class="line">husky &gt; commit-msg (node v10.1.0)</span><br><span class="line">No staged files match any of provided globs.</span><br><span class="line">⧗   input: foo: this will fail</span><br><span class="line">✖   type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test] [type-enum]</span><br><span class="line"></span><br><span class="line">✖   found 1 problems, 0 warnings</span><br><span class="line">ⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint</span><br><span class="line"></span><br><span class="line">husky &gt; commit-msg hook failed (add --no-verify to bypass)</span><br></pre></td></tr></table></figure><hr><h2 id="standard-version-自动生成CHANGELOG"><a href="#standard-version-自动生成CHANGELOG" class="headerlink" title="standard-version 自动生成CHANGELOG"></a><a href="https://github.com/conventional-changelog/standard-version">standard-version</a> 自动生成CHANGELOG</h2><p>执行 standard-version 命令即可生成 CHANGELOG，或者向CHANGELOG增加这段提交历史对应的记录。</p><p>同时自动确定语义化版本号，并打上tag。</p><p><strong>Install</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm i -g standard-version</span><br></pre></td></tr></table></figure><p><strong>Usage</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">standard-version</span><br><span class="line"></span><br><span class="line">✔ outputting changes to CHANGELOG.md</span><br><span class="line">✔ committing CHANGELOG.md</span><br><span class="line">✔ tagging release v1.0.1</span><br><span class="line">ℹ Run `git push --follow-tags origin develop` to publish</span><br></pre></td></tr></table></figure><p>CHANGELOG 效果如下：</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678510950/blog/uxyex5nhcqfitdh6zhin.png" alt="standard-version"></p><hr><p>一套组合拳下来，正经的commit规范+自动生成CHANGELOG的机制就形成了。<br>此时再针对各个配置按需进行调整，就能run起来了。</p>]]></content>
    
    
    <summary type="html">规范你的commit，创建清晰的提交历史。</summary>
    
    
    
    <category term="效率技能" scheme="https://shenxiaohai.me/categories/%E6%95%88%E7%8E%87%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Git" scheme="https://shenxiaohai.me/tags/Git/"/>
    
    <category term="规范" scheme="https://shenxiaohai.me/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>利用 iCloud 链接 Notion 与本地文件</title>
    <link href="https://shenxiaohai.me/linking-local-files-to-Notion-with-iCloud/"/>
    <id>https://shenxiaohai.me/linking-local-files-to-Notion-with-iCloud/</id>
    <published>2022-03-16T23:10:26.000Z</published>
    <updated>2023-04-02T11:33:22.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>用 Notion 一阵时间了，作为我的事项管理和笔记软件，体验一直不错。</p><p>不过存在一个痛点：Notion Page 中无法将本地文件进行链接&#x2F;映射，也就是无法在笔记中引用本地资源。</p><p>此前，我遇到小文件尚可在 Notion 上传和下载（体验不是很好），遇到大文件就没辙了。</p><p>个人使用的商业笔记软件，本就存在隐私泄漏风险，如果引用本地资源还要进行文件的上传，我是觉得 1.非常不方便、2.非常不安全。</p><p>所以一直想要一套点击链接就能跳转到本地文件夹的机制。</p><p>最近 Google 了一下这个问题，看到 reddit 上有两个帖子讨论这个话题：</p><ul><li><a href="https://www.reddit.com/r/Notion/comments/ktzx0w/direct_link_to_file_or_folder_on_macos/">Direct link to file or folder on MacOS</a></li><li><a href="https://www.reddit.com/r/Notion/comments/kbiwob/notion_and_icloud_on_mac/">Notion and iCloud on Mac</a></li></ul><p>帖子中讲了如何利用 iCloud Drive 在 Notion 上进行本地文件的链接。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><strong>前提：</strong>需要在 Mac 上使用 iCloud Drive，即 iCloud 云盘。</li><li>选中引用的文件或者文件夹，在 Finder 工具栏选中「共享所选项目」或者右键选择「共享文件&#x2F;文件夹」。</li><li>选择「拷贝链接」，安全起见建议设置成「仅限于受限用户」，权限根据需要调整「可更改&#x2F;仅查看」，点击共享生成链接。</li><li>将共享链接粘贴到 Notion 页面中，点击链接即可跳转到本地文件夹。<br><strong>测试了下，在手机上也可以实现 Notion 到 iCloud 的跳转 🤗</strong></li></ol><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>这种方式的优势在于：</p><ol><li>省时，省去了资源在 Notion 的上传下载时间。</li><li>省力，点击跳转本地文件夹进行资源操作。</li><li>安全，iCloud 与 Notion 是两种权限设置，前者是 Apple ID&#x2F;iCloud 拥有者控制的，只要控制好 iCloud 分享的权限，即使是笔记内容泄漏，文件资源他人还是无法访问的。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>我觉得麻烦的地方，就是共享文件获取链接这一步比较繁琐，期待找到一种快捷的方式。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.reddit.com/r/Notion/comments/ktzx0w/direct_link_to_file_or_folder_on_macos/">Direct link to file or folder on MacOS</a></li><li><a href="https://www.reddit.com/r/Notion/comments/kbiwob/notion_and_icloud_on_mac/">Notion and iCloud on Mac</a></li><li><a href="https://support.apple.com/zh-cn/guide/mac-help/mchl91854a7a/mac">使用“iCloud 文件共享”与他人共享文件夹和文稿</a></li></ul>]]></content>
    
    
    <summary type="html">介绍如何使用iCloud将Notion和本地文件链接起来</summary>
    
    
    
    <category term="工具分享" scheme="https://shenxiaohai.me/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Notion" scheme="https://shenxiaohai.me/tags/Notion/"/>
    
    <category term="iCloud" scheme="https://shenxiaohai.me/tags/iCloud/"/>
    
  </entry>
  
  <entry>
    <title>如何将现有证书适配支持 fastlane match</title>
    <link href="https://shenxiaohai.me/SupportFastlaneMatchforExisting/"/>
    <id>https://shenxiaohai.me/SupportFastlaneMatchforExisting/</id>
    <published>2021-12-29T21:33:38.000Z</published>
    <updated>2023-03-11T05:02:28.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Xcode 的 <code>Automatically manage signing</code> 虽然方便，但是不适合多人项目，尤其是在 CI&#x2F;CD 机器上部署自动化流程的场景。</p><p>iOS 签名机制复杂，各种密钥、证书、配置文件等概念一堆。在本地机器配置好一整套证书已经颇为不易，要是同事编译项目问你要证书密钥，各种导出安装，想想就头皮发麻。</p><p>Fastlane 一声炮响，送出了 <a href="https://docs.fastlane.tools/actions/match/">match</a> 这个大杀器。轻轻地在键盘敲下 <code>fastlane match init</code> 和 <code>fastlane match development|adhoc|appstore</code>，就可以从无到有创建一套完成的证书配置，有新同事加入时也仅需要通过<code>match</code>命令在本地安装好所需要的证书。你给我翻译翻译，什么他妈的是他妈的惊喜。</p><p>fastlane match 的文档推荐把已有的证书清空，清清爽爽地使用 match 创建证书。如果你不在乎已有项目的证书配置等，fastlane 提供了 <a href="https://docs.fastlane.tools/actions/match/#nuke">Nuke</a> 命令帮助你删除，不过用之前认真考虑下。</p><p>但是如果你跟我一样，担心废弃旧证书会给正在开发的队友造成不必要的麻烦，且本意是为了方便后续加入开发的队友安装证书，你可以按照接下来的教程，手动地将现有的证书迁移到 fastlane match 仓库。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="创建-fastlane-match-repository"><a href="#创建-fastlane-match-repository" class="headerlink" title="创建 fastlane match repository"></a>创建 fastlane match repository</h2><p>fastlane match 依赖 git 仓库同步，可以创建一个空仓库。</p><p>将后续步骤中得到的文件放置在仓库中，文件结构应该如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── certs</span><br><span class="line">│   ├── development</span><br><span class="line">│   │   ├── developement_cert_id.cer</span><br><span class="line">│   │   └── developement_cert_id.p12</span><br><span class="line">│   └── distribution</span><br><span class="line">│       ├── distribution_cert_id.cer</span><br><span class="line">│       └── distribution_cert_id.p12</span><br><span class="line">├── match_version.txt</span><br><span class="line">└── profiles</span><br><span class="line">    ├── adhoc</span><br><span class="line">    │   └── AdHoc_bundle_id.mobileprovision</span><br><span class="line">    ├── appstore</span><br><span class="line">    │   └── AppStore_bundle_id.mobileprovision</span><br><span class="line">    └── development</span><br><span class="line">        └── Development_bundle_id.mobileprovision</span><br></pre></td></tr></table></figure><h2 id="准备-certificate-id"><a href="#准备-certificate-id" class="headerlink" title="准备 certificate id"></a>准备 certificate id</h2><p>fastlane match profile 仓库中证书都是 <em>certificate_id.cer</em> 命名，所以需要准备证书的 id，后面简称 cert id。</p><p><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/">Michał Laskowski</a> 提到 Keychain 中看不了 certificate id，给了下面一个 <a href="https://gist.github.com/veraposeidon/cf7711c3a88a4d96711fc1f7e65fdf8d">ruby 脚本</a>从 Apple Developer Portal 获取。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;spaceship&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Spaceship</span><span class="symbol">:</span><span class="symbol">:login</span>(<span class="string">&quot;your@apple.id&quot;</span>)</span><br><span class="line"><span class="title class_">Spaceship</span><span class="symbol">:</span><span class="symbol">:select_team</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Spaceship</span><span class="symbol">:</span><span class="symbol">:certificate</span>.all.each <span class="keyword">do</span> |<span class="params">certificate</span>|</span><br><span class="line">    cert_type = <span class="title class_">Spaceship</span><span class="symbol">:</span><span class="symbol">:Portal</span><span class="symbol">:</span><span class="symbol">:Certificate</span><span class="symbol">:</span><span class="symbol">:CERTIFICATE_TYPE_IDS</span>[certificate.type_display_id].to_s.split(<span class="string">&#x27;::&#x27;</span>).last</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;certificate.id&#125;</span> - <span class="subst">#&#123;certificate.name&#125;</span> - <span class="subst">#&#123;certificate.status&#125;</span> - <span class="subst">#&#123;cert_type&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其实，我观察到还有一种方式可以获取到 cert id：在 Apple Developer Portal 点开具体的 certificate，在浏览器 Url Path 上显式展示了 cert id。</p><p>形式同 <code>https://developer.apple.com/account/resources/certificates/download/cert_id</code>。</p><h2 id="加密证书"><a href="#加密证书" class="headerlink" title="加密证书"></a>加密证书</h2><p>从 KeyChain 中导出想要迁移到 match 的证书，导出为 <em>certificate.cer</em> 和 <em>certificate.p12</em> ，通过以下步骤进行加密。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.</span></span><br><span class="line">openssl pkcs12 -nocerts -nodes -out key.pem -<span class="keyword">in</span> certificate.p12</span><br><span class="line"><span class="comment"># 2. </span></span><br><span class="line">openssl aes-256-cbc -k your_password -<span class="keyword">in</span> key.pem -out cert_id.p12 -a</span><br><span class="line"><span class="comment"># 3.</span></span><br><span class="line">openssl aes-256-cbc -k your_password -<span class="keyword">in</span> certificate.cer -out cert_id.cer -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照证书类型，将 <em>cert_id.p12</em> 和 <em>cert_id.p12</em> 放置在 match 仓库中。</p><h2 id="准备-Profile"><a href="#准备-Profile" class="headerlink" title="准备 Profile"></a>准备 Profile</h2><p>从 Apple Developer Portal 下载类型为 development | Ad hoc | App Store 的 Profiles，根据证书类型和项目的 bundle id 进行命名，格式如下。然后放置在 match 仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Development_your.bundle.id.mobileprovision</span><br><span class="line">AppStore_your.bundle.id.mobileprovision</span><br><span class="line">AdHoc_your.bundle.id.mobileprovision</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>至此， fastlane match 仓库准备完成了，推到远端，按照 match 文档配置你的 Fastfile，进行尝试吧。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/">Simplify your life with fastlane match</a></li><li><a href="https://docs.fastlane.tools/actions/match">fastlane docs | match</a></li></ol>]]></content>
    
    
    <summary type="html">老项目如何支持 fastlane match 进行证书同步</summary>
    
    
    
    <category term="iOS" scheme="https://shenxiaohai.me/categories/iOS/"/>
    
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="fastlane" scheme="https://shenxiaohai.me/tags/fastlane/"/>
    
    <category term="Tool" scheme="https://shenxiaohai.me/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>利用 GitHub Actions 进行 iOS 项目的 CI/CD</title>
    <link href="https://shenxiaohai.me/GitHubActionsForIos/"/>
    <id>https://shenxiaohai.me/GitHubActionsForIos/</id>
    <published>2021-10-28T21:50:47.000Z</published>
    <updated>2023-04-02T11:22:59.475Z</updated>
    
    <content type="html"><![CDATA[<p>搞 iOS 以来，一直在想找一个云主机进行 iOS 项目的 CI 探索，方向想偏了，没找到几家提供 macOS 系统的云主机，遂作罢。</p><p>最近在读 《<a href="https://www.raywenderlich.com/books/ios-app-distribution-best-practices/">iOS App Distribution &amp; Best Practices</a>》，里面提到现在有大致三类 CI 服务商：</p><ol><li>Full-service CI，即全方位服务的 CI 提供商，可以理解为通过交互页面就可以进行部署。虽然简单，但可能不太容易拓展。典型如：<ol><li>Bitrise: <a href="https://www.bitrise.io/">https://www.bitrise.io/</a></li><li>Microsoft’s App Center: <a href="https://appcenter.ms/">https://appcenter.ms/</a></li></ol></li><li>Managed CI，即在云上替你托管硬件相关的工作，你只需要提供构建脚本，在 iOS 项目中，常见的就是构建方式就是 <code>fastlane</code> 和 <code>xcodebuild</code>。比较流行的如：<ol><li>CircleCI: <a href="https://circleci.com/">https://circleci.com/</a></li><li>GitHub Actions: <a href="https://github.com/features/actions">https://Github.com/features/actions</a></li></ol></li><li>Manual CI，即手动管理，感觉跟自己在云主机上处理一个概念。便宜，但得自己管理服务器。最著名的就是 Travis CI: <a href="https://travis-ci.org/">https://travis-ci.org/</a> 了。</li></ol><p>怀着激动的心，每个官方都去逛了一遍，确实都提供了 macOS 的构建环境，nice，der~。而且都有都有免费的配额（收费方式都是卖点卡）。</p><p>最后还是选择 GitHub Actions 作为远程 CI 的第一个实验品。截图如下</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678508338/blog/i7uaczlxoy2nkpy4kree.png" alt="job"></p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678508339/blog/yzwjlswtgx9bxxmuqcw0.png" alt="workflows"></p><h1 id="GitHub-Actions-使用"><a href="#GitHub-Actions-使用" class="headerlink" title="GitHub Actions 使用"></a>GitHub Actions 使用</h1><p>中文的概念介绍和使用方式可以去看阮一峰的 <a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a> 。</p><p>或者直接去看官方文档 <a href="https://docs.github.com/en/actions">GitHub Actions</a> 。</p><p>简单来说，就是在仓库目录 <code>.github/workflows/</code> 放置脚本，当有 push 或 PR 的时候，就会触发脚本运行。</p><p><strong>免费额度查看方式</strong>，「右上角LOGO」-「Settings」-「Billings &amp; plans」</p><h1 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">iOS</span> <span class="string">starter</span> <span class="string">workflow</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件，在 main 分支上有 push 和 PR 行为时触发脚本</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br></pre></td></tr></table></figure><h1 id="Step-整理"><a href="#Step-整理" class="headerlink" title="Step 整理"></a>Step 整理</h1><h2 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Test</span> <span class="string">default</span> <span class="string">scheme</span> <span class="string">using</span> <span class="string">any</span> <span class="string">available</span> <span class="string">iPhone</span> <span class="string">simulator</span></span><br><span class="line">    <span class="comment"># 环境</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">  <span class="comment"># Checkout 当前分支进行处理</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stepxxx</span></span><br><span class="line">  <span class="comment"># operation</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="Pod-install"><a href="#Pod-install" class="headerlink" title="Pod install"></a>Pod install</h2><p>iOS 项目免不了用 cocoaPods 安装依赖。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">pod</span> <span class="string">install</span> <span class="string">--repo-update</span></span><br></pre></td></tr></table></figure><h3 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><p>在 <code>Podfile</code> 头部标记 <code>source &#39;https://github.com/CocoaPods/Specs.git&#39;</code> 不是很明智。</p><p>cocoaPods 官方在 <a href="https://blog.cocoapods.org/CocoaPods-1.7.2/">CocoaPods 1.7.2 — Master Repo CDN is Finalized!</a> 表示，随着 pod 数目的增多，利用 github 作为数据库备份越来越慢了，已经更换成 CDN 的形式了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span></span><br><span class="line"><span class="comment"># 替换成 CDN，或者干脆删除。因为默认 CDN 源了。</span></span><br><span class="line"><span class="string">source</span> <span class="string">&#x27;https://cdn.cocoapods.org/&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="默认-Scheme"><a href="#默认-Scheme" class="headerlink" title="默认 Scheme"></a>默认 Scheme</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">Default</span> <span class="string">Scheme</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    scheme_list=$(xcodebuild -list -json | tr -d &quot;\n&quot;)</span></span><br><span class="line"><span class="string">    default=$(echo $scheme_list | ruby -e &quot;require &#x27;json&#x27;; puts JSON.parse(STDIN.gets)[&#x27;project&#x27;][&#x27;targets&#x27;][0]&quot;)</span></span><br><span class="line"><span class="string">    echo $default | cat &gt;default</span></span><br><span class="line"><span class="string">    echo Using default scheme: $default</span></span><br></pre></td></tr></table></figure><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>用模拟器进行编译。优先跑 .xcworkspace，无则跑 .xcodeproj。</p><p>我测试的时候，在 GitHub Actions 上 <code>xcrun</code> 得到的模拟器名称不正确，所以直接固定了使用 iPhone 11 作为模拟器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;default&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;iOS Simulator&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)</span></span><br><span class="line"><span class="string">    # device=`xcrun xctrace list devices 2&gt;&amp;1 | grep -oE &#x27;iPhone.*?[^\(]+&#x27; | head -1 | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">    device=&#x27;iPhone 11&#x27;</span></span><br><span class="line"><span class="string">    if [ $scheme = default ]; then scheme=$(cat default); fi</span></span><br><span class="line"><span class="string">    if [ &quot;`ls -A | grep -i \\.xcworkspace\$`&quot; ]; then filetype_parameter=&quot;workspace&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcworkspace\$`&quot;; else filetype_parameter=&quot;project&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcodeproj\$`&quot;; fi</span></span><br><span class="line"><span class="string">    file_to_build=`echo $file_to_build | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">    xcodebuild build-for-testing -scheme &quot;$scheme&quot; -&quot;$filetype_parameter&quot; &quot;$file_to_build&quot; -destination &quot;platform=$platform,name=$device&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;default&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;iOS Simulator&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)</span></span><br><span class="line"><span class="string">    # device=`xcrun xctrace list devices 2&gt;&amp;1 | grep -oE &#x27;iPhone.*?[^\(]+&#x27; | head -1 | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">    device=&#x27;iPhone 11&#x27;</span></span><br><span class="line"><span class="string">    if [ $scheme = default ]; then scheme=$(cat default); fi</span></span><br><span class="line"><span class="string">    if [ &quot;`ls -A | grep -i \\.xcworkspace\$`&quot; ]; then filetype_parameter=&quot;workspace&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcworkspace\$`&quot;; else filetype_parameter=&quot;project&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcodeproj\$`&quot;; fi</span></span><br><span class="line"><span class="string">    file_to_build=`echo $file_to_build | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">    xcodebuild test-without-building -scheme &quot;$scheme&quot; -&quot;$filetype_parameter&quot; &quot;$file_to_build&quot; -destination &quot;platform=$platform,name=$device&quot;</span></span><br></pre></td></tr></table></figure><h1 id="通知以及跨Job传递状态"><a href="#通知以及跨Job传递状态" class="headerlink" title="通知以及跨Job传递状态"></a>通知以及跨Job传递状态</h1><ol><li><p>使用 ravsamhq&#x2F;notify-slack-action@v1 将 Job 状态通知到 Slack。</p></li><li><p>因为该 action 运行在 Linux 系统，所以需要另起一个 Job。</p></li><li><p>如何将上一个 Job 的状态通知到下一个 Job？一种思路是将 Job_A的状态通过文本保存到本地，再在Job_B中读取该状态。</p><p>可参考：<a href="https://github.community/t/how-get-the-status-of-previous-jobs/17555">How get the status of previous jobs</a></p></li></ol><h2 id="保存状态"><a href="#保存状态" class="headerlink" title="保存状态"></a>保存状态</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">file</span> <span class="string">status_build_test.txt</span> <span class="string">and</span> <span class="string">write</span> <span class="string">the</span> <span class="string">job</span> <span class="string">status</span> <span class="string">into</span> <span class="string">it</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    echo $&#123;&#123; job.status &#125;&#125; &gt; status_build_test.txt</span></span><br><span class="line"><span class="string"></span><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">file</span> <span class="string">status_build_test.txt</span> <span class="string">as</span> <span class="string">an</span> <span class="string">artifact</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pass_status_build_test</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">status_build_test.txt</span></span><br></pre></td></tr></table></figure><h2 id="读取状态"><a href="#读取状态" class="headerlink" title="读取状态"></a>读取状态</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">pass_status_build_test</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/download-artifact@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pass_status_build_test</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">the</span> <span class="string">statuses</span> <span class="string">of</span> <span class="string">Job</span> <span class="string">build</span> <span class="string">output</span> <span class="string">parameters</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">set_outputs</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;::set-output name=status_build_test::$(&lt;pass_status_build_test/status_build_test.txt)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="附录-完整版"><a href="#附录-完整版" class="headerlink" title="附录-完整版"></a>附录-完整版</h1><p>附上我当前使用的完整脚本，持续完善中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">iOS</span> <span class="string">starter</span> <span class="string">workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Test</span> <span class="string">default</span> <span class="string">scheme</span> <span class="string">using</span> <span class="string">any</span> <span class="string">available</span> <span class="string">iPhone</span> <span class="string">simulator</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          pod install --repo-update</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">Default</span> <span class="string">Scheme</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          scheme_list=$(xcodebuild -list -json | tr -d &quot;\n&quot;)</span></span><br><span class="line"><span class="string">          default=$(echo $scheme_list | ruby -e &quot;require &#x27;json&#x27;; puts JSON.parse(STDIN.gets)[&#x27;project&#x27;][&#x27;targets&#x27;][0]&quot;)</span></span><br><span class="line"><span class="string">          echo $default | cat &gt;default</span></span><br><span class="line"><span class="string">          echo Using default scheme: $default</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">scheme:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;default&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">platform:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;iOS Simulator&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)</span></span><br><span class="line"><span class="string">          # device=`xcrun xctrace list devices 2&gt;&amp;1 | grep -oE &#x27;iPhone.*?[^\(]+&#x27; | head -1 | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">          # 直接指定 iPhone 11</span></span><br><span class="line"><span class="string">          device=&#x27;iPhone 11&#x27;</span></span><br><span class="line"><span class="string">          if [ $scheme = default ]; then scheme=$(cat default); fi</span></span><br><span class="line"><span class="string">          if [ &quot;`ls -A | grep -i \\.xcworkspace\$`&quot; ]; then filetype_parameter=&quot;workspace&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcworkspace\$`&quot;; else filetype_parameter=&quot;project&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcodeproj\$`&quot;; fi</span></span><br><span class="line"><span class="string">          file_to_build=`echo $file_to_build | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">          xcodebuild build-for-testing -scheme &quot;$scheme&quot; -&quot;$filetype_parameter&quot; &quot;$file_to_build&quot; -destination &quot;platform=$platform,name=$device&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">scheme:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;default&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">platform:</span> <span class="string">$&#123;&#123;</span> <span class="string">&#x27;iOS Simulator&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)</span></span><br><span class="line"><span class="string">          # device=`xcrun xctrace list devices 2&gt;&amp;1 | grep -oE &#x27;iPhone.*?[^\(]+&#x27; | head -1 | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">          # 直接指定 iPhone 11</span></span><br><span class="line"><span class="string">          device=&#x27;iPhone 11&#x27;</span></span><br><span class="line"><span class="string">          if [ $scheme = default ]; then scheme=$(cat default); fi</span></span><br><span class="line"><span class="string">          if [ &quot;`ls -A | grep -i \\.xcworkspace\$`&quot; ]; then filetype_parameter=&quot;workspace&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcworkspace\$`&quot;; else filetype_parameter=&quot;project&quot; &amp;&amp; file_to_build=&quot;`ls -A | grep -i \\.xcodeproj\$`&quot;; fi</span></span><br><span class="line"><span class="string">          file_to_build=`echo $file_to_build | awk &#x27;&#123;$1=$1;print&#125;&#x27;`</span></span><br><span class="line"><span class="string">          xcodebuild test-without-building -scheme &quot;$scheme&quot; -&quot;$filetype_parameter&quot; &quot;$file_to_build&quot; -destination &quot;platform=$platform,name=$device&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">file</span> <span class="string">status_build_test.txt</span> <span class="string">and</span> <span class="string">write</span> <span class="string">the</span> <span class="string">job</span> <span class="string">status</span> <span class="string">into</span> <span class="string">it</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo $&#123;&#123; job.status &#125;&#125; &gt; status_build_test.txt</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">file</span> <span class="string">status_build_test.txt</span> <span class="string">as</span> <span class="string">an</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">pass_status_build_test</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">status_build_test.txt</span></span><br><span class="line">  <span class="comment"># 因为 notify-slack-action 跑在 Linux 系统所以另起一个 Job</span></span><br><span class="line">  <span class="attr">notify:</span></span><br><span class="line">    <span class="attr">needs:</span> [ <span class="string">build</span> ]</span><br><span class="line">    <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Notify</span> <span class="string">Slack</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">pass_status_build_test</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">pass_status_build_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">the</span> <span class="string">statuses</span> <span class="string">of</span> <span class="string">Job</span> <span class="string">build</span> <span class="string">output</span> <span class="string">parameters</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">set_outputs</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;::set-output name=status_build_test::$(&lt;pass_status_build_test/status_build_test.txt)&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Notify</span> <span class="string">Slack</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ravsamhq/notify-slack-action@v1</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">always()</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">status:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.set_outputs.outputs.status_build_test</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SLACK_WEBHOOK_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SLACK_WEBHOOK</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">iOS CI/CD with GitHub Actions, 及踩坑记录。</summary>
    
    
    
    <category term="iOS" scheme="https://shenxiaohai.me/categories/iOS/"/>
    
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="GitHub Actions" scheme="https://shenxiaohai.me/tags/GitHub-Actions/"/>
    
    <category term="CI/CD" scheme="https://shenxiaohai.me/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的简单使用</title>
    <link href="https://shenxiaohai.me/regular-expression-simpleUse/"/>
    <id>https://shenxiaohai.me/regular-expression-simpleUse/</id>
    <published>2021-10-10T21:47:03.000Z</published>
    <updated>2023-04-02T11:31:53.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="元字符及其反义"><a href="#元字符及其反义" class="headerlink" title="元字符及其反义"></a>元字符及其反义</h2><p>元字符是正则表达式的基本元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配除换行符以外的任意字符</span></span><br><span class="line">.</span><br><span class="line"><span class="comment"># 匹配字母或数字或下划线或汉字【character】</span></span><br><span class="line">\w</span><br><span class="line"><span class="comment"># 匹配任意不是（字母或数字或下划线或汉字）的字符</span></span><br><span class="line">\W</span><br><span class="line"><span class="comment"># 匹配任意的空白符【space】</span></span><br><span class="line">\s</span><br><span class="line"><span class="comment"># 匹配任意是不是空白符的字符</span></span><br><span class="line">\S</span><br><span class="line"><span class="comment"># 匹配数字【digit】</span></span><br><span class="line">\d</span><br><span class="line"><span class="comment"># 匹配任意非数字的字符</span></span><br><span class="line">\D</span><br><span class="line"><span class="comment"># 匹配单词的开始或结束【boundaries】</span></span><br><span class="line">\b</span><br><span class="line"><span class="comment"># 匹配不是单词开始或结束的位置</span></span><br><span class="line">\B</span><br><span class="line"><span class="comment"># 匹配字符串的开始</span></span><br><span class="line">^</span><br><span class="line"><span class="comment"># 匹配字符串的结束</span></span><br><span class="line">$</span><br><span class="line"><span class="comment"># 匹配除了x以外的任意字符</span></span><br><span class="line">[^x]</span><br><span class="line"><span class="comment"># 匹配除了aeiou这几个字符以外的任意字符</span></span><br><span class="line">[^aeiou]</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配有 abc 开头的字符串</span></span><br><span class="line">\babc</span><br><span class="line">^abc </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 8 位数字的 QQ 号码</span></span><br><span class="line">^\d\d\d\d\d\d\d\d$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 1 开头 11 位数字的手机号码</span></span><br><span class="line">^1\d\d\d\d\d\d\d\d\d\d\d\d$</span><br></pre></td></tr></table></figure><h2 id="重复限定符"><a href="#重复限定符" class="headerlink" title="重复限定符"></a>重复限定符</h2><p>用来处理重复的元素，简化正则写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复零次或更多次</span></span><br><span class="line">*</span><br><span class="line"><span class="comment"># 重复一次或更多次</span></span><br><span class="line">+</span><br><span class="line"><span class="comment"># 重复零次或一次</span></span><br><span class="line">?</span><br><span class="line"><span class="comment"># 重复 n 次</span></span><br><span class="line">&#123;n&#125;</span><br><span class="line"><span class="comment"># 重复 n 次或更多次</span></span><br><span class="line">&#123;n,&#125;</span><br><span class="line"><span class="comment"># 重复 n 次到 m 次</span></span><br><span class="line">&#123;n,m&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 8 位数字的 QQ 号码</span></span><br><span class="line">^\d&#123;8&#125;$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 1 开头 11 位数字的手机号码</span></span><br><span class="line">^1\d&#123;10&#125;$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配银行卡号是 14~18 位的数字</span></span><br><span class="line">^\d&#123;14, 18&#125;$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以 a 开头的，0 个或多个 b 结尾的字符串</span></span><br><span class="line">^ab*$</span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>用于同时限定多个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用小括号 () 进行分组</span></span><br><span class="line">()</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配字符串中包含 0 到多个 ab 开头</span></span><br><span class="line">^(ab)*</span><br></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>用于表示正则里占用的特殊字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义的字符前加斜杠 \ 进行转义标识</span></span><br><span class="line">\</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配字符串中包含 0 到多个 (ab) 开头</span></span><br><span class="line">^(\(ab\))*</span><br></pre></td></tr></table></figure><h2 id="条件或"><a href="#条件或" class="headerlink" title="条件或"></a>条件或</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用符号竖杠 | 标识正则中的条件或</span></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 联通有 130/131/132/155/156/185/186/145/176 等号段，匹配一个联通的号码</span></span><br><span class="line">^(130|131|132|155|156|185|186|145|176)\d&#123;8&#125;$</span><br></pre></td></tr></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><p>元素逐个枚举会比较复杂，所以用区间简化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用符号中括号 [] 标识区间</span></span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定 0 到 9</span></span><br><span class="line">[0-9]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定 A 到 Z</span></span><br><span class="line">[A-Z]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定某些字符和数字</span></span><br><span class="line">[165af]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联通有 130/131/132/155/156/185/186/145/176 等号段，匹配一个联通的号码</span></span><br><span class="line">^((<span class="number">13</span>[<span class="number">0</span>-<span class="number">2</span>])|(<span class="number">15</span>[<span class="number">5</span>-<span class="number">6</span>])|(<span class="number">18</span>[<span class="number">5</span>-<span class="number">6</span>])|<span class="number">145</span>|<span class="number">176</span>)$</span><br></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>零宽：不占位，断言：用于定位。</p><ul><li>正向先行断言（正前瞻）<ul><li>语法：<code>(？=pattern)</code></li><li>作用：匹配 pattern 表达式的前面内容，不返回本身。</li></ul></li><li>正向后行断言（正后顾）:<ul><li>语法：<code>(?&lt;=pattern)</code></li><li>作用：匹配 pattern 表达式的后面的内容，不返回本身。</li></ul></li><li>负向先行断言（负前瞻）<ul><li>语法：<code>(?!pattern)</code></li><li>作用：匹配非 pattern 表达式的前面内容，不返回本身。</li></ul></li><li>负向后行断言（负后顾）<ul><li>语法：<code>(?&lt;!pattern)</code></li><li>作用：匹配非 pattern 表达式的后面内容，不返回本身。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">&quot;&lt;span class=\&quot;read-count\&quot;&gt;阅读数：641&lt;/span&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正前瞻</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;.+(?=&lt;/span&gt;)&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group())</span><br><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;read-count&quot;</span>&gt;阅读数：<span class="number">641</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正前瞻</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;\d+(?=&lt;/span&gt;)&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group())</span><br><span class="line"><span class="number">641</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正后顾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;(?&lt;=&lt;span class=\&quot;read-count\&quot;&gt;阅读数：)\d+&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group())</span><br><span class="line"><span class="number">641</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">&quot;我爱祖国，我是祖国的花朵&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负前瞻</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;祖国(?!的花朵)&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group())</span><br><span class="line">祖国</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负后顾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;(?&lt;!我爱)祖国&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group())</span><br><span class="line">祖国</span><br></pre></td></tr></table></figure><h2 id="捕获与非捕获"><a href="#捕获与非捕获" class="headerlink" title="捕获与非捕获"></a>捕获与非捕获</h2><p>用于分组匹配。</p><ul><li>数字编号捕获组<ul><li>语法：<code>(exp)</code></li><li>解释：每个括号表示一个分组，第0个分组表示整个表达式。</li></ul></li><li>命名编号捕获组<ul><li>语法：<code>(?&lt;name&gt;exp)</code></li><li>Python 需要使用 <code>(?P&lt;name&gt;exp)</code>，见 <a href="https://stackoverflow.com/questions/10059673/named-regular-expression-group-pgroup-nameregexp-what-does-p-stand-for">Named regular expression group “(?Pregexp)”: what does “P” stand for?</a></li><li>解释：分组的命名由表达式中的 <code>name</code> 指定。</li></ul></li><li>非捕获组<ul><li>语法：<code>(?:exp)</code></li><li>解释：用于标记这个分组不需要捕获。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">&quot;020-85653333&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字编号捕获组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;(0\d&#123;2&#125;)-(\d&#123;8&#125;)&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group(<span class="number">0</span>))</span><br><span class="line">020-<span class="number">85653333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group(<span class="number">1</span>))</span><br><span class="line">020</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group(<span class="number">2</span>))</span><br><span class="line"><span class="number">85653333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名编号捕获组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;(?P&lt;区号&gt;0\d&#123;2&#125;)-(?P&lt;号码&gt;\d&#123;8&#125;)&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">12</span>), <span class="keyword">match</span>=<span class="string">&#x27;020-85653333&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group(<span class="string">&#x27;区号&#x27;</span>))</span><br><span class="line">020</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(value.group(<span class="string">&#x27;号码&#x27;</span>))</span><br><span class="line"><span class="number">85653333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非捕获组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = re.search(<span class="string">r&quot;(?:0\d&#123;2&#125;)-(\d&#123;8&#125;)&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;020-85653333&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;85653333&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>「捕获与非捕获」会返回一个捕获组，这个分组既可以在正则外部进行引用，也可以在正则表达式内部进行引用，实现一些较为复杂的匹配。在正则表达式内部引用捕获组，称之为反向引用。</p><ul><li>数字编号反向引用<ul><li><code>\number</code></li></ul></li><li>命名编号反向引用<ul><li><code>\&#39;name&#39;</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">&quot;aabbbbgbddesddfiid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TASK: 捕获成对的字母，如 aa、bb</span></span><br><span class="line"><span class="comment"># 思路: 匹配字母用\w，重复用 \1，即(\w)\1。</span></span><br><span class="line"></span><br><span class="line">value = re.search(<span class="string">r&quot;(\w)\1&quot;</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;aa&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代输出所有</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;(\w)\1&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value <span class="keyword">in</span> re.finditer(pattern, line):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(value.group(<span class="number">0</span>))</span><br><span class="line">...</span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">bb</span><br><span class="line">dd</span><br><span class="line">dd</span><br><span class="line">ii</span><br></pre></td></tr></table></figure><h2 id="贪婪和非贪婪"><a href="#贪婪和非贪婪" class="headerlink" title="贪婪和非贪婪"></a>贪婪和非贪婪</h2><ul><li>贪婪模式：当正则表达式中包含能接受重复的限定符时，匹配尽可能多的字符。即能多不会少。</li><li>非贪婪模式：当正则表示中包含能接受重复的限定符时，匹配尽可能少的字符。即能少不会多。<ul><li>懒惰量词：在贪婪量词后面加 <code>?</code></li></ul></li><li>多个贪婪量词在一起时，会按深度优先原则，也就是从左到右，优先满足左边的贪婪量词，剩余再分配下一个量词匹配。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复零次或更多次</span></span><br><span class="line">*</span><br><span class="line"><span class="comment"># 重复一次或更多次</span></span><br><span class="line">+</span><br><span class="line"><span class="comment"># 重复零次或一次</span></span><br><span class="line">?</span><br><span class="line"><span class="comment"># 重复 n 次</span></span><br><span class="line">&#123;n&#125;</span><br><span class="line"><span class="comment"># 重复 n 次或更多次</span></span><br><span class="line">&#123;n,&#125;</span><br><span class="line"><span class="comment"># 重复 n 次到 m 次</span></span><br><span class="line">&#123;n,m&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复零次或更多次，尽可能少重复</span></span><br><span class="line">*?</span><br><span class="line"><span class="comment"># 重复一次或更多次，尽可能少重复</span></span><br><span class="line">+?</span><br><span class="line"><span class="comment"># 重复零次或一次，尽可能少重复</span></span><br><span class="line">??</span><br><span class="line"><span class="comment"># 重复 n 次，尽可能少重复</span></span><br><span class="line">&#123;n&#125;?</span><br><span class="line"><span class="comment"># 重复 n 次或更多次，尽可能少重复</span></span><br><span class="line">&#123;n,&#125;?</span><br><span class="line"><span class="comment"># 重复 n 次到 m 次，尽可能少重复</span></span><br><span class="line">&#123;n,m&#125;?</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.zhihu.com/question/48219401/answer/742444326">你是如何学会正则表达式的？</a></li><li><a href="https://juejin.cn/post/6844903677119954958">正则表达式真的很骚，可惜你不会写！！！</a></li></ul>]]></content>
    
    
    <summary type="html">正则表达式的笔记。</summary>
    
    
    
    <category term="效率技能" scheme="https://shenxiaohai.me/categories/%E6%95%88%E7%8E%87%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="技巧" scheme="https://shenxiaohai.me/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="正则表达式" scheme="https://shenxiaohai.me/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第十一期</title>
    <link href="https://shenxiaohai.me/TRA-11/"/>
    <id>https://shenxiaohai.me/TRA-11/</id>
    <published>2021-06-20T19:02:34.000Z</published>
    <updated>2023-03-11T05:02:28.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「Tip」-jq-轻量级命令行-JSON-处理器"><a href="#「Tip」-jq-轻量级命令行-JSON-处理器" class="headerlink" title="「Tip」./jq 轻量级命令行 JSON 处理器"></a>「Tip」<code>./jq</code> 轻量级命令行 JSON 处理器</h1><blockquote><p>jq is a lightweight and flexible command-line JSON processor.</p></blockquote><p>有时候会在命令行确认一些 HTTP 请求，并分析以下其中的某些字段，但是如果 server 返回 JSON 没有格式化的话，会比较难以阅读，这里推荐一个命令行 JSON 处理工具 jq。</p><p>官网地址：<a href="https://stedolan.github.io/jq/">https://stedolan.github.io/jq/</a></p><ol><li>按系统下载执行文件 <code>jq-osx-amd64</code></li><li>重命名为 <code>jq</code>，并移动至 <code>usr/local/bin</code> 目录下；或者其他目录，确保已经在 <code>$PATH</code> 中。</li><li>使用 <code>curl xxxx | jq .</code></li></ol><p>效果如图所示：<br><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509728/blog/vtaazzelgmwoynnhcptg.png" alt="jq"></p><h1 id="「Review」写代码注释的最佳实践"><a href="#「Review」写代码注释的最佳实践" class="headerlink" title="「Review」写代码注释的最佳实践"></a>「Review」写代码注释的最佳实践</h1><p>原文：<a href="https://stackoverflow.blog/2021/07/05/best-practices-for-writing-code-comments/">Best practices for writing code comments</a></p><p>程序代码有两类读者，编译器和人类。编译器会忽略注释，找到语法正确的代码进行执行；而人类则依赖注释来理解作者的代码。</p><p>遵守一些注释的规则可以节省自己和队友的时间。</p><blockquote><p>代码告诉你怎么做，注释告诉你为什么。</p></blockquote><ol><li><p>注释不能只是代码的重复。</p><ul><li><p>Bad Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a for loop // &lt;-- comment</span></span><br><span class="line"><span class="keyword">for</span> <span class="comment">// start for loop</span></span><br><span class="line">(   <span class="comment">// round bracket</span></span><br><span class="line">    <span class="comment">// newline</span></span><br><span class="line"><span class="type">int</span> <span class="comment">// type for declaration</span></span><br><span class="line">i    <span class="comment">// name for declaration</span></span><br><span class="line">=   <span class="comment">// assignment operator for declaration</span></span><br><span class="line"><span class="number">0</span>   <span class="comment">// start value for i</span></span><br></pre></td></tr></table></figure><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509729/blog/jtk2fch1eshw0dvqbqyl.png" alt="代码重复注释"></p></li></ul></li><li><p>注释不能用来解释本不清晰的代码。应该在代码内体现的信息，就不要通过滥用注释来提供。</p><ul><li><p>Bad Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="type">static</span> Node <span class="title">getBestChildNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    Node n; <span class="comment">// best child node candidate</span></span><br><span class="line">    <span class="keyword">for</span> (Node node: node.<span class="built_in">getChildren</span>()) &#123;</span><br><span class="line">        <span class="comment">// update n if the current state is better</span></span><br><span class="line">        <span class="keyword">if</span> (n == null || <span class="built_in">utility</span>(node) &gt; <span class="built_in">utility</span>(n)) &#123;</span><br><span class="line">            n = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Good Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="type">static</span> Node <span class="title">getBestChildNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    Node bestNode;</span><br><span class="line">    <span class="keyword">for</span> (Node currentNode: node.<span class="built_in">getChildren</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bestNode == null || <span class="built_in">utility</span>(currentNode) &gt; <span class="built_in">utility</span>(bestNode)) &#123;</span><br><span class="line">            bestNode = currentNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bestNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果你不能写出清晰的注释，可能是代码有问题。</p><ul><li><p>Kernighan’s Law</p><blockquote><p>调试在一开始就比编写程序困难一倍。因此，按照定义，如果你的代码写得非常巧妙，那么你就没有足够的能力来调试它。</p><p>Brian Kernighan</p></blockquote><p>即：简单的代码会比复杂的代码更可取，因为调试复杂代码的过程中出现的任何问题都会十分棘手，甚至无法解决。</p></li><li><p>Bad Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你不需要理解这块逻辑</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>注释应该用于消除困惑，而不是造成困惑。</p></li><li><p>对一些不太地道的代码应该加以注释。</p><p>即对一些别人可能认为不需要的或者多余的代码进行注释，如果没有注释，有人可能会“简化”代码。</p><p>通过写下注释来解释，可以节省未来读者的时间和焦虑。</p><ul><li><p>Good  Case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">JSONTokener</span>(jsonString)).nextValue();</span><br><span class="line"><span class="comment">// Note that JSONTokener.nextValue() may return</span></span><br><span class="line"><span class="comment">// a value equals() to null.</span></span><br><span class="line"><span class="keyword">if</span> (value == <span class="literal">null</span> || value.equals(<span class="literal">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>复制的代码需要提供原始的链接。</p><p>你有时候会使用网上找到的代码，提供引用的来源，可以让读者了解完整的上下文，比如：</p><ol><li>解决了什么问题</li><li>是谁提供的代码</li><li>为什么推荐这个方案</li><li>评论者的看法</li><li>到目前为止是否还有效</li><li>它能否被改进</li></ol><ul><li><p>Good Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Converts a Drawable to Bitmap. via &lt;https://stackoverflow.com/a/46018816/2219998&gt;. */</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Many thanks to Chris Veness at &lt;http://www.movable-type.co.uk/scripts/latlong.html&gt;</span></span><br><span class="line"><span class="comment">// for a great reference and examples.</span></span><br></pre></td></tr></table></figure></li><li><p>Bad Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Magical formula taken from a stackoverflow post, reputedly related to</span></span><br><span class="line"><span class="comment">// human vision perception.</span></span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) (<span class="number">0.3</span> * red + <span class="number">0.59</span> * green + <span class="number">0.11</span> * blue);</span><br></pre></td></tr></table></figure></li></ul><p><strong>备注：不要拷贝你不理解的代码。</strong></p></li><li><p>注释里放一些外部参考资料的链接，当这些资料十分有帮助的时候。</p><p>一些标准或者其他文档的链接，可以帮助读者理解代码正在解决的问题。</p><p>虽然这些信息可能位于设计文档的某个地方，但是一个放置得当的注释可以为读者在最需要它的时间和地点提供及时的帮助。</p><ul><li><p>Good Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;http://tools.ietf.org/html/rfc4180&gt; suggests that CSV lines</span></span><br><span class="line"><span class="comment">// should be terminated by CRLF, hence the \\r\\n.</span></span><br><span class="line">csvStringBuilder.<span class="built_in">append</span>(<span class="string">&quot;\\r\\n&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注释不仅应该在最初编写代码的时候添加，还应该在修改代码时添加，尤其是在修复 Bug 的时候。</p><ul><li><p>Good Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> At least in Firefox 2, if the user drags outside of the browser window,</span></span><br><span class="line"><span class="comment">// mouse-move (and even mouse-down) events will not be received until</span></span><br><span class="line"><span class="comment">// the user drags back inside the window. A workaround for this issue</span></span><br><span class="line"><span class="comment">// exists in the implementation for onMouseLeave().</span></span><br><span class="line">@<span class="function">Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">onMouseMove</span><span class="params">(Widget sender, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; .. &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use the name as the title if the properties did not include one (issue #1425)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用注释标记不完整的实现。</p><p>有时候即使知道代码有局限性，但也只能先 merge。虽然说大家不愿意分享代码已知的缺陷，但最好明确地说出这些缺陷，比如用 <code>TODO</code> 进行注释。</p><p>还有一点，对这一类注释使用标准的格式，有助于度量和处理技术债务。</p><p>再优化一些，可以在自己的 Board 中添加一个 issue，并在注释中引用这个 issue。</p><ul><li><p>Good Case</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO(hal): We are making the decimal separator be a period, </span></span><br><span class="line"><span class="comment">// regardless of the locale of the phone. We need to think about </span></span><br><span class="line"><span class="comment">// how to allow comma as decimal separator, which will require </span></span><br><span class="line"><span class="comment">// updating number parsing and other places that transform numbers </span></span><br><span class="line"><span class="comment">// to strings, such as FormatAsDecimal</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="「Algorithm」最接近的三数之和"><a href="#「Algorithm」最接近的三数之和" class="headerlink" title="「Algorithm」最接近的三数之和"></a>「Algorithm」<a href="https://leetcode-cn.com/problems/3sum-closest/description/">最接近的三数之和</a></h1><p><strong>题目：</strong>给定一个包括 <em>n</em> 个整数的数组 <code>nums</code> 和 一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p><strong>思路：</strong> 双指针，左右指针。</p><p><strong>解</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=16 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [16] 最接近的三数之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> best = <span class="number">1e7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> update = [&amp;](<span class="type">int</span> cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(cur - target) &lt; <span class="built_in">abs</span>(best - target)) &#123;</span><br><span class="line">                best = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; n; a++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b = a + <span class="number">1</span>, c =  n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (b &lt; c) &#123;</span><br><span class="line">                <span class="type">int</span> sum = nums[a] + nums[b] + nums[c];</span><br><span class="line">                <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> target;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">update</span>(sum);</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                    <span class="type">int</span> c0 = c - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (b &lt; c0 &amp;&amp; nums[c0] == nums[c]) &#123;</span><br><span class="line">                        c0--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    c = c0;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> b0 = b + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (b0 &lt; c &amp;&amp; nums[b0] == nums[b]) &#123;</span><br><span class="line">                        b0++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    b = b0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> best;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure><h2 id="双指针套路框架"><a href="#双指针套路框架" class="headerlink" title="双指针套路框架"></a>双指针套路框架</h2><h3 id="快、慢指针的常用算法"><a href="#快、慢指针的常用算法" class="headerlink" title="快、慢指针的常用算法"></a>快、慢指针的常用算法</h3><ol><li>判定链表中是否含有环。</li><li>已知链表中含有环，返回这个环的起始位置。</li><li>寻找无环单链表的中点。</li><li>寻找单链表的倒数第<code>k</code>个元素。</li></ol><h3 id="左、右指针的常用算法"><a href="#左、右指针的常用算法" class="headerlink" title="左、右指针的常用算法"></a>左、右指针的常用算法</h3><ol><li>二分搜索。</li><li>两数之和。</li><li>反转数组。</li><li>滑动窗口算法。</li></ol>]]></content>
    
    
    <summary type="html">1. jq. 2. 写注释的最佳实践. 3. 双指针.</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="Linux" scheme="https://shenxiaohai.me/tags/Linux/"/>
    
    <category term="注释" scheme="https://shenxiaohai.me/tags/%E6%B3%A8%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第十期</title>
    <link href="https://shenxiaohai.me/TRA-10/"/>
    <id>https://shenxiaohai.me/TRA-10/</id>
    <published>2021-05-29T16:39:08.000Z</published>
    <updated>2023-04-02T11:34:49.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「Tip」使用Provisional-Authorization发送试用通知"><a href="#「Tip」使用Provisional-Authorization发送试用通知" class="headerlink" title="「Tip」使用Provisional Authorization发送试用通知"></a>「Tip」使用Provisional Authorization发送试用通知</h1><blockquote><p>学习至少一个技术技巧。<strong>主要是为了总结和归纳你在日常工作中所遇到的知识点。</strong></p></blockquote><p><code>Notification</code> 权限申请后可以用来展示提醒、播放提示音或者展示红点。</p><p>一种常用的申请方式是在上下文中显式地请求授权。效果如图：<br><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678511022/blog/ulh5wfgaduamibt129ot.png" alt="A screenshot showing the system prompting the user to allow or disallow the use of alerts, sounds, and badges when the app sends notifications."></p><p>写法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line">center.requestAuthorization(options: [.alert, .sound, .badge]) &#123; granted, error <span class="keyword">in</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">        <span class="comment">// Handle the error here.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Enable or disable features based on the authorization.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子 App 会在第一次发起授权请求时提示用户批准或者拒绝授权，确定好用户权限偏好后，后续不会再提示用户。这样用户在不熟悉 App 的情况下大概率会直接拒绝。</p><p>Apple 提供了一种临时授权的方式（provisional authorization）来允许 App 发出通知，然后用户可以看到后再评估是否需要关闭通知。效果如图：</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678511023/blog/u3faomzmsexrjr5voqwo.png" alt="A screenshot of a notification in the notification center, with buttons to keep or turn off the notification."></p><p>代码如下，就是在 <code>options</code> 中增加 <code>.provisional</code> 选项。它的逻辑在于，不会提示用户来确定授权，而是会自动授予权限，将通知俏咪咪地放在历史记录中，由用户决定是保留还是关掉。如果用户选择保留，还有两种选择，1. Prominent Notification，就是申请授权时的包含的所有权限都授予 App；2. Quiet Notification，就是只允许通知在通知中心的历史记录里，而不授予其他三类权限。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line">center.requestAuthorization(options: [.alert, .sound, .badge, .provisional]) &#123; granted, error <span class="keyword">in</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">        <span class="comment">// Handle the error here.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Provisional authorization granted.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档链接：<a href="https://developer.apple.com/documentation/usernotifications/asking_permission_to_use_notifications">Asking Permission to Use Notifications</a></p><h1 id="「Review」7-DevOps-steps-you’re-missing"><a href="#「Review」7-DevOps-steps-you’re-missing" class="headerlink" title="「Review」7 DevOps steps you’re missing"></a>「Review」7 DevOps steps you’re missing</h1><blockquote><p>阅读并点评至少一篇英文技术文章。<strong>主要是为了学习英文，如果你的英文不行，基本上无缘技术高手。</strong></p></blockquote><p>第75期 <a href="https://stackoverflow.blog/2021/05/28/the-overflow-75-where-design-meets-development/">OverFlow Newsletter</a> 推荐了这份免费电子书，<a href="https://learn.gitlab.com/gtm-devops-consideration2-mgr/7-devops-steps-youre?utm_medium=sponsorship&utm_source=stackoverflow&utm_campaign=devopsgtm_global_pr_newsletter_x_x&utm_content=pf-seven-devops-steps-ebook_digital_x-pr_english_"><strong>The Seven DevOps Steps You are Missing</strong></a>，看了下 Logo 应该是 <strong>GitLab 的推广文</strong>。它介绍了 DevOps 团队可能会忽视的7个任务，以及 DevOps 平台是如何进行助力的。</p><p><strong>忽视的原因</strong>：为了软件快速推出落地，一些“尽量能够实施的好东西”，比如额外测试、监控或者更紧凑的循环反馈机制，其优先级都让位于“快速完成”。DevOps就跟节食和锻炼一样，都不容易。由于一个软件的开发生命周期使用的平台越多，需要进行交接、沟通、人工干预等的成本就越高，以下列举了七个使用单一 DevOPS平台能够带来好处。</p><h2 id="给故障管理提供可追溯性"><a href="#给故障管理提供可追溯性" class="headerlink" title="给故障管理提供可追溯性"></a>给故障管理提供可追溯性</h2><p>故障管理是每个团队不可避免的，找到一个能够简化该流程的方法至关重要。通常情况下，监控工具与IDE、部署过程是分开存在的，告警是外部产生的，没法与常用工具联系起来，而且也没有一个地方可以找到所有信息。</p><p>DevOps 平台可以轻松地在故障管理工具中提取数据，接收警告通知，对警告和故障进行分流，是相关开发人员处于流转中，而无需离开平台。由于从发现问题到诊断和补救的事件非常紧迫，一个与故障管理解决方案同步的 DevOps 平台意味着更快的解决。</p><h2 id="测试一切"><a href="#测试一切" class="headerlink" title="测试一切"></a>测试一切</h2><p>大多数团队没有定期运行静态应用安全（SAST）、动态应用安全（DAST）、合规或依赖扫描，即使是运行扫描的团队，大多数时候扫描结果也不会在回到 IDE 中展示出来。为了解决测试的难题，从一个全面的 DevOps 平台开始，其将会使测试更容易放置在流程的早期，并且开发人员不必去索要测试结果，因为测试结果会在 merge request 之后展示出来。如果自动化测试被内置到 DevOps 平台中，它将会变得更容易；它越容易，可以覆盖和触发的测试就越多。</p><p>实行测试只是战斗的一半，一旦发现 Bug，就必须要进行修复。同上一节，统一的 DevOps 平台能够提供内置的可视性和告警，能简化流程并将错误的发现前置，使开发人员修复Bug的可能性提高，而不必等在运行的后期发现Bug然后以笨拙的方式进行处理。另外，在提交 PR 后发现错误，意味着其他开发者可以不在错误的代码上继续开发。</p><h2 id="主流程性能监控"><a href="#主流程性能监控" class="headerlink" title="主流程性能监控"></a>主流程性能监控</h2><p>和测试一样，性能监控是开发过程中的另外一个步骤，但是其不经常发生，是因为这样的工具并没有被纳入开发过程。但是，了解代码的实际运行性能对开发人员来说是很有用的，但谁也不愿意中断自己的工作流程，去寻找另外一个工具并进行模拟来测试性能，太低效了。还有一种方式是等待 QA 验证，但这也算不上一种好的解决方案。</p><p>一个统一的 DevOps 平台可以让开发人员利用工具对新代码进行性能测试，包括浏览器测试、相关的负载测试和动态应用安全（DAST）等重要的步骤，特特别是在代码被快速部署上线的环境中。能够真正看到代码在现实世界中按照预期工作，是非常令人满意的。</p><h2 id="有效的合作"><a href="#有效的合作" class="headerlink" title="有效的合作"></a>有效的合作</h2><p><strong>未来职业生涯中最重要的技能：沟通和协作。</strong></p><p>大家都知道沟通和协作的重要性，但是让事情变简单是一个挑战，尤其是远程协作或者跨组织协作时，距离或时间是一个巨大的障碍，但更大的挑战是确保每个人都能获得相同的信息，无论大家处于什么角色。在许多组织中，协作工具可能是分散的，并且与实际的工作脱离开来。</p><blockquote><p>统一的 DevOps 平台将所有的利益相关者带到了同一张桌子上。无论是产品、安全、人力资源还是法律。如果每个人都使用同一个平台，就很容易进行评论、分享，并对软件开发过程的每个部分由真正的可视性。</p></blockquote><p>使用统一的平台还有一个好处，就是摩擦和误解可以缓解，因为围绕单一平台的合作意味着每个人都需要学习各自的行话，这将改善沟通和前进的结果。</p><h2 id="合规变得更容易"><a href="#合规变得更容易" class="headerlink" title="合规变得更容易"></a>合规变得更容易</h2><p>追踪法规和条例在一些行业是强制性的，在其他一些行业则是最佳做法。但是合规性在大多数组织中是一种令人头痛的问题。即使是大公司也仍然在使用电子表格、电子邮件和云文件来监督合作工作。不得不在所有这些不同的地方寻找数据，然后将其与第三方工具或服务联系在一起，头疼。</p><p>此外，许多组织没有一个单一的合规性仓库；有些组织单独增加了治理、风险和合规性（Governance, Risk, Compliance, GRC）工具，而这些工具也没有雨DevOps 整合。事实上，开发和运营都将与合规有关的任务都视为“妨碍”应用快速发布，当然这种想法没有任何帮助。</p><p>统一的 DevOps 平台可以改变这种状况，如果大家都是在一个单一平台上，就很容易定义用户的角色和权限，从而建立起证书、安全扫描和规则批准的流程。因为应用的安全性检测本身就是在平台上构建的，所以自动满足信息安全的要求是一件很简单的事情。一些行业有非常具体的合规性要求，在单一的 DevOps 平台上工作，可以很容易的通过 Issue 和 PR 来进行跟踪协作、监管链以及重写（Override），没有必要用单独的工具来管理这个过程。</p><h2 id="扭转技术债务"><a href="#扭转技术债务" class="headerlink" title="扭转技术债务"></a>扭转技术债务</h2><p>每个团队都在于技术债务做斗争，首先要证明解决它的时间是合理的。 DevOps 可以帮忙解决这个问题，因为非开发人员（包括产品和其他业务方）可以有机会接触到开发方的数据。</p><p>当业务方想知道为什么团队需要花时间在技术债务上时，看一下数字就会发现 25% 的部署是失败的，平均恢复时间是6小时 … 换句话说，花时间来偿还技术债务是有价值的。 DevOps 平台可以作为一种方式来宣传这个过程，给业务方提供更多的背景内容。</p><h2 id="利用受控部署的优势"><a href="#利用受控部署的优势" class="headerlink" title="利用受控部署的优势"></a>利用受控部署的优势</h2><p>团队都希望有更多的自动化，有更多的控制，有能力不住尽可能多或者尽可能少的代码。 DevOps 平台可以改变这种情况，只需要一个工具，就可以很容易的将所有分散的协同部署部分集中到一个地方，从多个审批到核准、授权以及确保正确的人在正确的任务集上工作。这样子，Dev 和 Ops 对流程有了前所未有的控制。</p><p>得嘞，看完才知道真的是推广文。但是说的有道理么，确实有道理，工作之后发现协作机制上有很多不合理的地方，跟这篇文章也算呼应了。</p><h1 id="「Algorithm」-打开转盘锁"><a href="#「Algorithm」-打开转盘锁" class="headerlink" title="「Algorithm」[打开转盘锁]"></a>「Algorithm」[打开转盘锁]</h1><blockquote><p>每周至少做一个 LeetCode 的算法题。<strong>主要是为了编程训练和学习。</strong>如果不训练你看再多的算法书，你依然不会做算法题。</p></blockquote><p><strong>题目：</strong></p><p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code> 。每个拨轮可以自由旋转：例如把 <code>&#39;9&#39;</code> 变为 <code>&#39;0&#39;</code>，<code>&#39;0&#39;</code> 变为 <code>&#39;9&#39;</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p><p>锁的初始数字为 <code>&#39;0000&#39;</code> ，一个代表四个拨轮的数字的字符串。</p><p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p><p>字符串 <code>target</code> 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。</p><p><strong>思路：</strong></p><p>BFS。</p><p>BFS框架</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算从起点start到终点target的最短距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q;      <span class="comment">// 核心数据结构</span></span><br><span class="line">    Set&lt;Node&gt; visited;  <span class="comment">// 避免走回头路</span></span><br><span class="line">    </span><br><span class="line">    q.<span class="built_in">offer</span>(start);     <span class="comment">// 将起点加入队列</span></span><br><span class="line">    visited.<span class="built_in">add</span>(start);</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>;       <span class="comment">// 记录扩散的步数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q <span class="keyword">not</span> empty) &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 将当前队列中的所有节点向四周扩散 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否到达终点</span></span><br><span class="line">            <span class="keyword">if</span> (cur is target) &#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将cur的邻节点加入队列</span></span><br><span class="line">            <span class="keyword">for</span> (Node x: cur.<span class="built_in">adj</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x <span class="keyword">not</span> in visited) &#123;</span><br><span class="line">                    q.<span class="built_in">offer</span>(x);</span><br><span class="line">                    visited.<span class="built_in">add</span>(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=752 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [752] 打开转盘锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单向BFS</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">openLock</span><span class="params">(vector&lt;string&gt;&amp; deadends, string target)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; dead;</span><br><span class="line">        unordered_set&lt;string&gt; visited;</span><br><span class="line">        <span class="keyword">for</span> (string s : deadends) &#123;</span><br><span class="line">            dead.<span class="built_in">insert</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;string&gt; queue;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        queue.<span class="built_in">push</span>(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        visited.<span class="built_in">insert</span>(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (queue.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> sz = queue.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                string cur = queue.<span class="built_in">front</span>();</span><br><span class="line">                queue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (dead.<span class="built_in">count</span>(cur)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur == target) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> step;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    string up = <span class="built_in">plusOne</span>(cur, i);</span><br><span class="line">                    <span class="keyword">if</span> (!visited.<span class="built_in">count</span>(up))</span><br><span class="line">                    &#123;</span><br><span class="line">                        queue.<span class="built_in">push</span>(up);</span><br><span class="line">                        visited.<span class="built_in">insert</span>(up);</span><br><span class="line">                    &#125;</span><br><span class="line">                    string down = <span class="built_in">minusOne</span>(cur, i);</span><br><span class="line">                    <span class="keyword">if</span> (!visited.<span class="built_in">count</span>(down))</span><br><span class="line">                    &#123;</span><br><span class="line">                        queue.<span class="built_in">push</span>(down);</span><br><span class="line">                        visited.<span class="built_in">insert</span>(down);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">plusOne</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[n] == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[n] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[n] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">minusOne</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[n] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[n] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[n] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. iOS Notification 2. DevOps容易忽视的步骤 3. BFS</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="DevOps" scheme="https://shenxiaohai.me/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第九期</title>
    <link href="https://shenxiaohai.me/TRA-09/"/>
    <id>https://shenxiaohai.me/TRA-09/</id>
    <published>2021-05-04T13:46:04.000Z</published>
    <updated>2023-04-02T11:34:37.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="Apple-用户隐私授权弹窗文案大全"><a href="#Apple-用户隐私授权弹窗文案大全" class="headerlink" title="Apple 用户隐私授权弹窗文案大全"></a>Apple 用户隐私授权弹窗文案大全</h2><p>iOS 14.5之后，所有 App 必须使用 AppTrackingTransparency 框架来征得用户许可，才能对其进行跟踪或访问其设备的广告标识符。除非您征得用户对启用跟踪权限的许可，否则设备的广告标识符值将全部为零，您也将不允许跟踪用户。</p><p>因为权限弹窗只在 <code>.notDetermined</code> 时展示一下，为了吸引用户选择授权，弹窗内的文案就显得格外重要。<br><a href="https://www.attprompts.com/">https://www.attprompts.com/</a> 收集了很多的 App 在用户隐私授权弹窗的文案，供大家参考。</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678511034/blog/mzgero0ufdtxml88ajag.png" alt="文案提示"></p><p>And More…</p><p>除了在弹窗文案上绞尽脑汁，也可以尝试在展示授权弹窗之前展示自定义的信息。参考 Apple Human Interface Guidelines 的 <a href="https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessing-user-data/#displaying-custom-messaging-before-the-alert">Displaying Custom Messaging Before the Alert</a> 小节。</p><p>And More…</p><p><a href="https://swiftsenpai.com/development/get-ready-apptrackingtransparency/">Getting Ready for App Tracking Transparency</a> 作者介绍了如何将自己的 App 与 AppTrackingTransparency 兼容。</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="极致首帧播放方案-零首帧解决方案"><a href="#极致首帧播放方案-零首帧解决方案" class="headerlink" title="极致首帧播放方案 - 零首帧解决方案"></a><a href="https://mp.weixin.qq.com/s/IGA3caeXMB-upTFiV8MuYg">极致首帧播放方案 - 零首帧解决方案</a></h2><p>这篇文章针对短视频播放环节的各个阶段，介绍了对应的优化方案。</p><h3 id="视频点击播放流程"><a href="#视频点击播放流程" class="headerlink" title="视频点击播放流程"></a>视频点击播放流程</h3><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678511035/blog/jwumag5xat90hplt0o30.jpg" alt="视频点击播放流程"></p><h3 id="阶段及优化方法"><a href="#阶段及优化方法" class="headerlink" title="阶段及优化方法"></a>阶段及优化方法</h3><ul><li>获取播放地址：<ul><li>播放地址随feed下发。</li></ul></li><li>网络建连：<ul><li>DNS 预解析，预连接、连接复用，https TLS 1.3 false start, session 复用 0RTT。</li></ul></li><li>音视频首包<ul><li>减少 probe、moov 位置。</li></ul></li><li>音视频解码<ul><li>解码器异步初始化、解码器复用</li></ul></li><li>起播水位<ul><li>并不是首帧解码完成直接播放，而是起播之前缓存一定的数据来减少卡顿。</li></ul></li><li>预加载<ul><li>需要通过建立模型来确定是否开启预加载。需要实际考虑预加载的时机，以及其对带宽抢占的影响。</li></ul></li><li>预渲染<ul><li>提前将视频的首帧渲染好而不播放。</li></ul></li><li>长视频场景优化<ul><li>mp4 的 moov 在不同网络条件下对播放体验的影响会有很大差别。</li><li>对于弱网用户，建议使用 fmp4 的视频格式，fmp4 将视频拆成若干个片段，索引则存在各自的 side box，减小了起播所需要的数据。</li></ul></li><li>带历史进度的起播<ul><li>通常做法 seek 到历史进度前面最近一个关键帧，然后把视频帧塞进解码器，做丢帧处理，直到 pts 到指定的历史进度。这种方案在最坏场景下需要额外下载 20 Mb 的数据。文章建议直接在关键帧位置起播，避免额外数据下载，缩短首帧耗时。</li></ul></li></ul><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="N-皇后"><a href="#N-皇后" class="headerlink" title="N 皇后"></a><a href="https://leetcode-cn.com/problems/n-queens/description/">N 皇后</a></h2><p><strong>描述：</strong></p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p><p><strong>解法</strong></p><ol><li>回溯算法 2. 通过valid函数优化选择数目</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=51 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [51] N 皇后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; results;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">board</span><span class="params">(n, string(n, <span class="string">&#x27;.&#x27;</span>))</span></span>;</span><br><span class="line">        <span class="built_in">backTracking</span>(board, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backTracking</span><span class="params">(vector&lt;string&gt; &amp;board, <span class="type">int</span> row)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (row == board.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            results.<span class="built_in">push_back</span>(board);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> currentCol = board[row].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; currentCol; col++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 排除不合法选项</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isValidChoice</span>(board, row, col)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// in</span></span><br><span class="line">            board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="built_in">backTracking</span>(board, row + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// out</span></span><br><span class="line">            board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidChoice</span><span class="params">(vector&lt;string&gt; &amp;board, <span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rows = board.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// check conflict in same row.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check conflict in +45 angle.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; rows; i--, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check conflict in -45 angle.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. 隐私弹窗文案 2. 首帧优化 3. N皇后</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="性能优化" scheme="https://shenxiaohai.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第八期</title>
    <link href="https://shenxiaohai.me/TRA-08/"/>
    <id>https://shenxiaohai.me/TRA-08/</id>
    <published>2021-04-11T17:34:48.000Z</published>
    <updated>2023-03-11T05:02:28.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="删除DerivedData的正确方式"><a href="#删除DerivedData的正确方式" class="headerlink" title="删除DerivedData的正确方式"></a>删除<code>DerivedData</code>的正确方式</h2><p>没错，正确的方式就是在Finder中将DerivedData文件夹移动到废纸篓中。</p><p><a href="https://lapcatsoftware.com/articles/DerivedData.html">Deleting DerivedData the right way</a> 这篇文章提到了直接在Terminal中通过<code>rm -fR</code>进行删除是一种错误的方式。</p><p>大致意思就是说，macOS上有个 <a href="https://developer.apple.com/documentation/coreservices/launch_services">Launch Services</a> 能够当当前运行的App打开其他App或者文件等，就跟在Finder中打开文件、App一样。当你安装一个应用程序的时候，Finder会自动向Launch Services注册该应用程序；但是，当你用Xcode编译一个应用程序时，这个注册不是显示发生的，而是在构建过程中Xcode自己注册的。（讲到这里，突然感觉这个删除方式跟Xcode构建iOS App没啥关系，因为App build结束也不会在Macos展示出来，暴汗…）。</p><p>当你把应用程序放进废纸篓时，Finder能够在Launch Services中自动注销应用程序，但是 <code>rm</code> 命令绕过了废纸篓，也就绕过了Launch Services，导致DerivedData文件夹中的任何注册应用程序都将留在Launch Services中。</p><p>文章还讲了一些在调用<code>rm</code>命令时自动触发删除Launch Services的方法，就不展开讲了。</p><p>快速找到DerivedData的方式如下，你也可以自己定义文件夹位置。</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509819/blog/y8qg9swyfdij5aeoifqp.jpg" alt="DerivedData"></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="七个数据库范例"><a href="#七个数据库范例" class="headerlink" title="七个数据库范例"></a>七个数据库范例</h2><p>有个Youtuber推荐给大家，<a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA">Fireship</a>。他有个100s系列，就是用100s的时间来讲一个开发领域的基本概念，不能说深入，但能拓展视野。这次做笔记的视频是 <strong>7 Database Paradigms</strong>（7个数据库范例）。</p><div class="video-container"><iframe src="https://www.youtube.com/embed/W2Z7fbCLSTw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ol><li><p>Key-Value Database 「键值数据库」</p><ul><li>简介：数据库本身的结构几乎类似于JavaScript对象或Python字典，其中我们拥有一组键，并且每个键都是唯一的并指向某个值。</li><li>热门数据库：Redis、memcached。</li><li>用途：<ul><li>大多数情况下，它们被用作缓存来减少数据延迟。Twitter、 GitHub 和 Snapchat 等应用程序都使用 Redis 来实时传输数据。</li><li>除了缓存之外，还有其他一些用例，比如消息队列、发布订阅和游戏排行榜。但通常情况下，键值数据库被用作其他一些持久数据之上的缓存。</li></ul></li></ul></li><li><p>Wide-Column Database 「列存储数据库」</p><ul><li>简介：一个宽列数据库就像是一个键值数据库，然后向其添加第二个维度。在外层，你有一个键空间可以容纳一个或多个列族，每个列族可以容纳一组有序的行，这样就可以将相关的数据组织在一起，但是不像关系数据库文档，它没有模式，所以它只能处理非结构化数据文档。这对于开发人员来说是件好事，因为你得到了一个称为 CQL 的查询语言，它与 SQL 非常相似，尽管它更有限，你不能连接，但是它更容易扩展。与 SQL 数据库不同，它是分散的，可以水平扩展。</li><li>热门数据库：Cassandra、HBase。</li><li>用途：<ul><li>它可以用来扩展大量的时间序列数据，比如来自物联网设备、气象传感器的记录，或者你的Nerflix上的观看记录。</li><li>它用在频繁写入，但不经常更新和读取的场景下。</li></ul></li></ul></li><li><p>Document Oriented Database 「面向文档的数据库」</p><ul><li>简介：在这种类型中，每个文档都是键值对的容器。它们是非结构化的，不需要模式。可以被索引，可以被组织成一个逻辑层次结构，允许我们对关系数据高度地建模和检索。</li><li>热门数据库：MongoDB、 Firestore、 DynamoDB、 Couch DB。</li><li>用途：<ul><li>它们通常适用于物联网内容管理、移动游戏和许多其他场景。</li><li>如果您不确定数据是如何结构化的，那么文档数据库可能是最好的起点。</li></ul></li></ul></li><li><p>The Relational Database 「关系型数据库」</p><ul><li>简介：算了。</li><li>热门数据库： MySQL、 Postgres、 SQL Server 。</li><li>用途：<ul><li>SQL 数据库特性：原子性、一致性、隔离性、持久性，这意味着只要数据库中有事务，即使出现网络或硬件故障，也能保证数据的有效性。这对于银行和金融机构来说是必不可少的。</li></ul></li></ul></li><li><p>Graph Database 「图数据库」</p><ol><li>简介：支持对图数据模型的增、删、改、查(CRUD)。</li><li>热门数据库：Neo4J、Dgraph。</li><li>用途：<ul><li>它们通常用于欺诈检测，或者用于公司内部知识图谱的构建，</li><li>又或者用于推荐系统，比如airbnb。</li></ul></li></ol></li><li><p>A Full Text Search Engine 「全文搜索引擎」</p><ul><li><p>简介：工作方式与面向文档的数据库非常相似。从索引开始，然后向其中添加数据对象。不同之处在于，引擎将分析文档中的所有文本，并创建可搜索术语的索引。本质上，它的工作原理就像你在教科书后面找到的索引，当用户进行搜索时，它只需要扫描索引。与数据库中的每个文档不同，即使在大型数据集上，引擎也可以运行各种不同的算法对结果进行排序，过滤掉不相关的点击，处理输入错误，等等。</p></li><li><p>热门数据库：Elasticsearch、Algolia。</p></li><li><p>用途：各类搜索引擎。</p></li></ul></li><li><p>Multi Model Database 「多模型数据库」</p><ul><li>下一代、灵活、综合、统一，balabala。</li></ul></li></ol><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="leetcode322-零钱兑换"><a href="#leetcode322-零钱兑换" class="headerlink" title="leetcode322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/description/">leetcode322. 零钱兑换</a></h2><p><strong>描述：</strong></p><p>给定不同面额的硬币 <code>coins</code> 和一个总金额 <code>amount</code>。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code>。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>思路：</strong></p><p>动态规划基本套路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=322 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [322] 零钱兑换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (coins.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, amount + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt; dp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - coin &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i - coin == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i], <span class="number">1</span> + dp[i-coin]);</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp[amount] == amount + <span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1.DerivedData 2.数据库分类 3. 动态规划凑硬币</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第七期</title>
    <link href="https://shenxiaohai.me/TAR-07/"/>
    <id>https://shenxiaohai.me/TAR-07/</id>
    <published>2021-02-01T00:33:13.000Z</published>
    <updated>2023-03-11T05:02:28.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="Xcode注释文档模板"><a href="#Xcode注释文档模板" class="headerlink" title="Xcode注释文档模板"></a>Xcode注释文档模板</h2><p>按照Xcode支持的方式注释代码，一方面是良好的编写规范需要，另一方面可以在Xcode查看帮助文档「Option + Click」或者智能提示时都能看到编写者的注释，非常方便。</p><p>最近总结了两个注释方式：</p><ul><li>「Command + Option + &#x2F;」<br>在类名、方法名、变量名上输入快捷键就可以生成注释模板。</li><li>枚举：&#x2F;&#x2F;!&lt; <ul><li>例如<code>int apple = 1, //!&lt; 枚举苹果 </code></li><li>但是我没找到对应的快捷键，所以是利用Dash的Snippet功能，设置缩写<code>//enum</code>替换为<code>//!&lt;  </code> ，这样可以在注释枚举时输入&#x2F;&#x2F;enum即可。</li></ul></li></ul><p>因为目前都是基于源码开发的，源码都可见，所以无论是在header file还是implementation file注释，帮助文档都是提示注释内容的。但是考虑到如果要生成library的话，可能在header file内注释比较规范。</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="nil-null-mess-in-Objective-C-and-Swift"><a href="#nil-null-mess-in-Objective-C-and-Swift" class="headerlink" title="nil-null-mess in Objective-C and Swift"></a><a href="https://www.andyibanez.com/posts/nil-null-mess-objective-c-and-swift/">nil-null-mess in Objective-C and Swift</a></h2><p>Andy Ibanez写的这篇文章讲了nil到NSNull再到Swift的Optional的一些变化。</p><p>这里强调了一点就是，nil 是 <code>空</code>本身，而 NSNull 是<code>空</code>的象征。<strong>if nil is the essence of nothingness itself, NSNull is a represence of nothingness.</strong></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/description/">二叉树中的最大路径和</a></h2><p><strong>描述：</strong></p><p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p><p><strong>路径和</strong> 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p><p><strong>思路：</strong></p><p>后序遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=124 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [124] 二叉树中的最大路径和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> result = INT_MIN;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSide</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">maxSide</span>(root-&gt;left));</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">maxSide</span>(root-&gt;right));</span><br><span class="line"></span><br><span class="line">        result = <span class="built_in">max</span>(result, root-&gt;val + left + right);    <span class="comment">// 联结左右</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(result, <span class="built_in">maxSide</span>(root)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. Xcode注释文档模板 2. nil &amp; NSNull 3. 二叉树中的最大路径和</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="Xcode" scheme="https://shenxiaohai.me/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第六期</title>
    <link href="https://shenxiaohai.me/TRA-06/"/>
    <id>https://shenxiaohai.me/TRA-06/</id>
    <published>2021-01-24T18:15:33.000Z</published>
    <updated>2023-03-11T05:02:28.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="SQL复习"><a href="#SQL复习" class="headerlink" title="SQL复习"></a>SQL复习</h2><p>最近在阿里云日志服务查询用户的实时日志，需要利用SQL进行查询，一些基础语句我都忘了，就找了本《SQL 必知必会》过了一遍。</p><p>一些常用的代码片段，写在了笔记里：<a href="https://shenxiaohai.me/2021/01/25/SQL-in-10Minutes/">《SQL必知必会》笔记</a>。</p><p>另外备注下，阿里云日志服务查询的格式是：<code>查询语句 ｜ 分析语句</code>。就是把SQL里的WHERE语句摘出来作为查询语句。</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="百度App-Objective-C-x2F-Swift-组件化混编之路"><a href="#百度App-Objective-C-x2F-Swift-组件化混编之路" class="headerlink" title="百度App Objective-C&#x2F;Swift 组件化混编之路"></a>百度App Objective-C&#x2F;Swift 组件化混编之路</h2><p> 同事推荐了这个百度App技术公众号的文章，我来瞅瞅。</p><p>这个系列理了下大概这么几篇文章：</p><ol><li><a href="http://mp.weixin.qq.com/s?__biz=MzUxMzk2ODI1NQ==&mid=2247483757&idx=1&sn=a63e61fc73beb4d3792ae20557e1897a&chksm=f94c507dce3bd96bce865da688a6b17c986d20021b3006b86dad5ae992f640ed4fe211f9207e&scene=21#wechat_redirect">百度App iOS工程化实践: EasyBox破冰之旅</a><br>主要介绍了百度的EasyBox工具，有别于CocoaPods，讲解了其设计的概念。</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzk2ODI1NQ==&mid=2247483830&idx=1&sn=a158b07ca3fe6a4ef8ff89d4f5b682aa&scene=21#wechat_redirect">百度App组件化之路</a><br>介绍了App组件化的历程，每个架构的优点和问题。</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzk2ODI1NQ==&mid=2247484177&idx=1&sn=df772d2134ad814bf0f8fafb883d8f77&chksm=f94c5201ce3bdb1787ea4f310de02b0a967983a8de3647034a2dc3c26c520fe493632aeb8be3&scene=21#wechat_redirect">百度App Objective-C&#x2F;Swift 组件化混编之路（一）</a><br>Swift稳定是混编的背景。</li><li><a href="https://mp.weixin.qq.com/s/xA3g0GdNvfKNgfvG6imEvw">百度App Objective-C&#x2F;Swift 组件化混编之路（二）- 工程化</a><br>Target内部的Module化及混编，组件内的混编，组件间的依赖。细节很丰富。</li><li><a href="https://mp.weixin.qq.com/s/-rBtXtkelcPQBMjQhwu07w">百度App Objective-C&#x2F;Swift 组件化混编之路（三）- 实践篇</a><br>改造实践。还没看~。</li></ol><p>介绍的很详细，可以当成一份参考文档。<br>有很多还是没看明白，可能还是对App编译层面的知识太浅薄。</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="最小覆盖子串"><a href="#最小覆盖子串" class="headerlink" title="最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/description/">最小覆盖子串</a></h2><p><strong>描述：</strong></p><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>思路：</strong></p><p>滑动窗口，拓展右边界，收缩左边界。通过字典来判断窗口是否包含目标子串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=76 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [76] 最小覆盖子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; target;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : t) &#123;</span><br><span class="line">            target[ch] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, len = INT_MAX;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> ch = s[right]; <span class="comment">// 窗口新增字符</span></span><br><span class="line">            right ++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (target.<span class="built_in">count</span>(ch))</span><br><span class="line">            &#123;</span><br><span class="line">                window[ch] += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (window[ch] == target[ch])</span><br><span class="line">                &#123;</span><br><span class="line">                    valid += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 收缩左边界</span></span><br><span class="line">            <span class="keyword">while</span> (valid == target.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (right - left &lt; len)</span><br><span class="line">                &#123;</span><br><span class="line">                    start = left;</span><br><span class="line">                    len = right - left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> d = s[left];   <span class="comment">// 窗口移除字符</span></span><br><span class="line">                left ++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (target.<span class="built_in">count</span>(d))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (window[d] == target[d])</span><br><span class="line">                    &#123;</span><br><span class="line">                        valid -= <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window[d] -= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len == INT_MAX ? <span class="string">&quot;&quot;</span> : s.<span class="built_in">substr</span>(start, len);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. SQL必知必会 2. 组件化混编 3. 最小覆盖子串</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>《SQL必知必会》笔记</title>
    <link href="https://shenxiaohai.me/SQL-in-10Minutes/"/>
    <id>https://shenxiaohai.me/SQL-in-10Minutes/</id>
    <published>2021-01-24T16:21:50.000Z</published>
    <updated>2023-04-02T11:38:42.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记📒"><a href="#笔记📒" class="headerlink" title="笔记📒"></a>笔记📒</h1><ul><li>SQL关键字使用大写，对列名和表名使用小写。</li><li>将SQL语句分成多行更容易阅读和调试。</li></ul><h1 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h1><h2 id="检索结果"><a href="#检索结果" class="headerlink" title="检索结果"></a>检索结果</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检索单个列 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检索多个列 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检索所有列 */</span></span><br><span class="line"><span class="comment">/* 通配符*会降低检索性能，但能检索出名字未知的列 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检索不同的值 */</span></span><br><span class="line"><span class="comment">/* DISTINCT 作用于所有列 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ven_id</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 限制结果 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span>; <span class="comment">/* LIMIT 5 OFFSET 3 表示从哪儿开始以及检索的行数，可以简化为LIMIT 3,5 */</span></span><br></pre></td></tr></table></figure><h2 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 排序数据 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;  <span class="comment">/* ORDER BY 需要保证是 SELECT 语句最后一条句子 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按多个列排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按列位置排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span>, <span class="number">3</span>; <span class="comment">/* 2, 3指的是SELECT清单中的第二个和第三个列名 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定排序方向 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name <span class="keyword">DESC</span>, prod_name;<span class="comment">/*默认升序，降序指定DESC，多个列降序需分别指定DESC*/</span></span><br></pre></td></tr></table></figure><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用WHERE子句 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">=</span> <span class="number">3.49</span>; <span class="comment">/* ORDER BY 应位于 WHERE 之后 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* WHERE操作符 */</span></span><br><span class="line"><span class="operator">=</span>  <span class="comment">-- 等于</span></span><br><span class="line"><span class="operator">&lt;&gt;</span> <span class="comment">-- 不等于</span></span><br><span class="line"><span class="operator">!=</span> <span class="comment">-- 不等于</span></span><br><span class="line"><span class="operator">&lt;</span>  <span class="comment">-- 小于</span></span><br><span class="line"><span class="operator">&lt;=</span> <span class="comment">-- 小于等于</span></span><br><span class="line"><span class="operator">!</span><span class="operator">&lt;</span> <span class="comment">-- 不小于</span></span><br><span class="line"><span class="operator">&gt;</span>  <span class="comment">-- 大于</span></span><br><span class="line"><span class="operator">&gt;=</span> <span class="comment">-- 大于等于</span></span><br><span class="line"><span class="operator">!</span><span class="operator">&gt;</span> <span class="comment">-- 不大于</span></span><br><span class="line"><span class="keyword">BETWEEN</span> <span class="comment">-- 在指定两个值之间</span></span><br><span class="line"><span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="comment">-- 为NULL值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 空值检查 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 范围值检查 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="高级数据过滤"><a href="#高级数据过滤" class="headerlink" title="高级数据过滤"></a>高级数据过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组合WHERE子句 - AND 操作符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组合WHERE子句 - OR 操作符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组合WHERE子句 - 括号标明求值顺序 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IN 操作符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="string">&#x27;DLL01&#x27;</span>, <span class="string">&#x27;BSR01&#x27;</span>) <span class="comment">-- 跟 OR 一个意思</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name</span><br><span class="line"></span><br><span class="line"><span class="comment">/* NOT 操作符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="comment">-- 跟 &lt;&gt; / != 一个意思</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name</span><br></pre></td></tr></table></figure><h2 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a>用通配符进行过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 百分号% 通配符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;Fish%&#x27;</span>; <span class="comment">-- %表示任何字符出现任意次数，能匹配0次数，但不能匹配NULL</span></span><br><span class="line"><span class="comment">-- WHERE prod_name LIKE &#x27;%bean bag%&#x27;;</span></span><br><span class="line"><span class="comment">-- WHERE prod_name LIKE &#x27;F%y&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 下划线_ 通配符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;__ inch teddy bear&#x27;</span>; <span class="comment">-- _只匹配单个字符而不是多个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方括号[] 通配符 */</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">&#x27;[JM]%&#x27;</span>  <span class="comment">-- 指定字符集，匹配其中一个字符</span></span><br><span class="line"><span class="comment">-- WHERE cust_contact LIKE &#x27;[^JM]%&#x27; -- ^表示否定</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact;</span><br></pre></td></tr></table></figure><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 拼接字段 */</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(vend_name, <span class="string">&#x27; (&#x27;</span>, vend_country, <span class="string">&#x27;)&#x27;</span>) <span class="comment">-- 使用 +/||/Concat 看DBMS</span></span><br><span class="line"><span class="keyword">FROM</span> Venders</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* RTRIM函数去掉右边空格 */</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(RTRIM(vend_name), <span class="string">&#x27; (&#x27;</span>, RTRIM(vend_country), <span class="string">&#x27;)&#x27;</span>) <span class="comment">-- 使用 +/||/Concat 看DBMS</span></span><br><span class="line"><span class="keyword">FROM</span> Venders</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用别名 */</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(RTRIM(vend_name), <span class="string">&#x27; (&#x27;</span>, RTRIM(vend_country), <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Venders</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行算术计算 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id, quantity, item_price </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line"> item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><h2 id="使用函数处理数据"><a href="#使用函数处理数据" class="headerlink" title="使用函数处理数据"></a>使用函数处理数据</h2><p>常用函数类别：</p><ul><li>用于处理文本字符串(如删除或填充值，转换值为大写或小写)的文本函数</li><li>用于在数值数据上进行算术操作(如返回绝对值，进行代数运算)的数值函数</li><li>用于处理日期和时间值并从这些值中提取特定成分(如返回两个日期之差，检查日期有效性)的日期和时间函数</li><li>返回 DBMS 正使用的特殊信息(如返回用户登录信息)的系统函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文本处理函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="built_in">UPPER</span>(vend_name) <span class="keyword">AS</span> vend_name_upcase </span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 日期和时间处理函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(order_date) <span class="operator">=</span> <span class="number">2012</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数值处理函数 */</span></span><br><span class="line">ABS <span class="operator">/</span> COS <span class="operator">/</span> EXP <span class="operator">/</span> PI <span class="operator">/</span> SIN <span class="operator">/</span> SQRT <span class="operator">/</span> TAN</span><br></pre></td></tr></table></figure><h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><p>聚集函数</p><ul><li>AVG</li><li>COUNT</li><li>MAX</li><li>MIN</li><li>SUM</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AVG函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>; <span class="comment">-- AVG()函数会忽略列值为NULL的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* COUNT函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust</span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust <span class="comment">-- 对cust_email列中有值的行进行计数</span></span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* MAX函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* MIN函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> min_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SUM函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_ordered </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(item_price<span class="operator">*</span>quantity) <span class="keyword">AS</span> total_price </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 聚集不同值 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> prod_price) <span class="keyword">AS</span> avg_price <span class="comment">-- DISTINCT不能用于COUNT(*)</span></span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组合聚集函数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items,</span><br><span class="line">       <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</span><br><span class="line">       <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</span><br><span class="line">       <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg</span><br><span class="line"> <span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建分组 */</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</span><br><span class="line"><span class="comment">-- GROUP BY 子句可以包含任意数目的列，因为可以对分组进行嵌套，更细致地进行数据分组。</span></span><br><span class="line"><span class="comment">-- GROUP BU 必须出现在WHERE子句之后，ORDER BY子句之前。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 过滤分组 */</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders </span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- HAVING支持所有WHERE操作符</span></span><br><span class="line"><span class="comment">-- WHERE过滤行，HAVING过滤分组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&gt;=</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 使用HAVING时应结合GROUP BY子句，WHERE子句则用于标准的行级过滤。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分组和排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 使用GROUP BY时，不要忘了使用ORDER BY，这是保证数据正确排序的唯一方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> order_num, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> items, order_num;</span><br></pre></td></tr></table></figure><p>SELECT 子句顺序</p><ol><li>SELECT</li><li>FROM</li><li>WHERE</li><li>GROUP BY</li><li>HAVING</li><li>ORDER BY</li></ol><h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 利用子查询进行过滤 */</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>);</span><br><span class="line"><span class="comment">-- 包含子查询的SELECT语句难以阅读和调试，</span></span><br><span class="line"><span class="comment">-- 所以把子查询分解为多行并进行适当的缩进，能极大地简化子查询的使用。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br><span class="line"><span class="comment">/* 作为计算字段使用子查询 */</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name,</span><br><span class="line">       cust_state,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Orders.cust_id <span class="operator">=</span> Customers.cust_id) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>关系表设计需要把信息分解成多个表，一类数据一个表，各表通过某些共同的值互相关联，能够更有效地存储，更方便地处理，而且可伸缩性更好。但是需要使用联结来进行跨多个表的查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建联结 */</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products</span><br><span class="line"><span class="keyword">WHERE</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id; </span><br><span class="line"><span class="comment">-- 在引用的列可能出现歧义时，必须使用完全限定列名：用一个句点分隔表名和列名。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 内联结 */</span></span><br><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products</span><br><span class="line"><span class="keyword">ON</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 联结多个表 */</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, vend_name, prod_price, quantity </span><br><span class="line"><span class="keyword">FROM</span> OrderItems, Products, Vendors</span><br><span class="line"><span class="keyword">WHERE</span> Products.vend_id <span class="operator">=</span> Vendors.vend_id</span><br><span class="line"><span class="keyword">AND</span> OrderItems.prod_id <span class="operator">=</span> Products.prod_id </span><br><span class="line"><span class="keyword">AND</span> order_num <span class="operator">=</span> <span class="number">20007</span>;</span><br><span class="line"><span class="comment">-- 联结的表越多，性能下降越厉害</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价比较 */</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用表别名 */</span>、</span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI </span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id</span><br><span class="line"><span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自联结 */</span></span><br><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> (<span class="keyword">SELECT</span> cust_name</span><br><span class="line"> <span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">WHERE</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>);</span><br><span class="line"><span class="comment">-- 使用自联结</span></span><br><span class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact </span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> c1, Customers <span class="keyword">AS</span> c2 <span class="comment">-- 实际上使用的是相同的表，使用别名来区别</span></span><br><span class="line"><span class="keyword">WHERE</span> c1.cust_name <span class="operator">=</span> c2.cust_name</span><br><span class="line"><span class="keyword">AND</span> c2.cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>;</span><br><span class="line"><span class="comment">-- 自联结用来代替相同表内的子查询语句，性能可能会更快。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自然联结 */</span></span><br><span class="line"><span class="keyword">SELECT</span> C.<span class="operator">*</span>, O.order_num, O.order_date, OI.prod_id, OI.quantity, OI.item_price</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI </span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id</span><br><span class="line"><span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 外联结 */</span></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num </span><br><span class="line"><span class="comment">-- 检索所有顾客及其订单</span></span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders  </span><br><span class="line"><span class="comment">-- 检索包括没有订单顾客在内的所有顾客，</span></span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders  <span class="comment">-- 左边表中选中所有行</span></span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders  <span class="comment">-- 右边表中选中所有行</span></span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用带聚集函数的联结 */</span></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, </span><br><span class="line"> <span class="built_in">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, </span><br><span class="line"> <span class="built_in">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders </span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br></pre></td></tr></table></figure><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>利用UNION操作符将多条SELECT语句组合成一个结果集。</p><ul><li>UINION分隔SELECT语句</li><li>UNION中的每个查询必须包含相同的列、表达式或聚集函数</li><li>列数据类型必须兼容，不必完全相同。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用UNION */</span></span><br><span class="line"><span class="comment">-- 单条语句</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">OR</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用UNION ALL */</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br><span class="line"><span class="comment">-- UNION ALL 不取消重复的行</span></span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 插入完整行 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1000000006&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">       <span class="keyword">NULL</span>,</span><br><span class="line">       <span class="keyword">NULL</span>);</span><br><span class="line"><span class="comment">-- 这种方式严格依赖列的顺序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country,</span><br><span class="line">                      cust_contact,</span><br><span class="line">                      cust_email)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1000000006&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">       <span class="keyword">NULL</span>,</span><br><span class="line">       <span class="keyword">NULL</span>);</span><br><span class="line"><span class="comment">-- 可以顺序不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入部分行 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1000000006&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;USA&#x27;</span>);</span><br><span class="line"><span class="comment">-- 省略的列，必须要么允许为NULL，要么有默认值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入检索出的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">cust_contact,</span><br><span class="line">cust_email,</span><br><span class="line">cust_name,</span><br><span class="line">cust_address,</span><br><span class="line">cust_city,</span><br><span class="line">cust_state,</span><br><span class="line">cust_zip,</span><br><span class="line">cust_country)</span><br><span class="line"><span class="keyword">SELECT</span> cust_id,</span><br><span class="line">       cust_contact,</span><br><span class="line">       cust_email,</span><br><span class="line">       cust_name,</span><br><span class="line">       cust_address,</span><br><span class="line">       cust_city,</span><br><span class="line">       cust_state,</span><br><span class="line">       cust_zip,</span><br><span class="line">       cust_country</span><br><span class="line"><span class="keyword">FROM</span> CustNew;</span><br></pre></td></tr></table></figure><h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 更新数据 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="string">&#x27;kim@thetoystore.com&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1000000005&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Sam Roberts&#x27;</span>,</span><br><span class="line">cust_email <span class="operator">=</span> <span class="string">&#x27;sam@toyland.com&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1000000006&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="keyword">NULL</span>  <span class="comment">-- 要删除某个列的值，可设置它为NULL。</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1000000005&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除数据 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1000000006&#x27;</span>;</span><br></pre></td></tr></table></figure><p>更新和删除数据很容易，所以应当很仔细地使用它。更新和删除的指导原则如下：</p><ul><li>除非确实打算更新和删除每一行，否则绝对不要使用不带 WHERE 子句 的 UPDATE 或 DELETE 语句。</li><li>保证每个表都有主键，尽可能 像 WHERE 子句那样使用它(可以指定各主键、多个值或值的范围)。</li><li>在 UPDATE 或 DELETE 语句使用 WHERE 子句前，应该先用 SELECT 进 行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确。</li><li>使用强制实施引用完整性的数据库，这样 DBMS 将不允许删除其数据与其他表相关联的行。</li></ul><h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表创建基础 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Products</span><br><span class="line">(</span><br><span class="line">    prod_id    <span class="type">CHAR</span>(<span class="number">10</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    vend_id    <span class="type">CHAR</span>(<span class="number">10</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_name  <span class="type">CHAR</span>(<span class="number">254</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_price <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_desc  <span class="type">VARCHAR</span>(<span class="number">1000</span>) <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用NULL值 */</span></span><br><span class="line"><span class="comment">-- 每个表列要么是NULL列，要么是NOT NULL列</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">    order_num  <span class="type">INTEGER</span>   <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    order_date DATETIME  <span class="keyword">NULL</span>,</span><br><span class="line">    cust_id    <span class="type">CHAR</span>(<span class="number">10</span>)  , <span class="comment">-- 表示可以NULL值</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定默认值 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OrderItems</span><br><span class="line">&#123;</span><br><span class="line">order_num    <span class="type">INTEGER</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">order_item   <span class="type">INTEGER</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">prod_id      <span class="type">CHAR</span>(<span class="number">10</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">quantity     <span class="type">INTEGER</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">item_price   <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更新表 -- 增加列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更新表 -- 删除列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CustCopy;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂的表结构更改一般需要手动删除过程，涉及以下步骤：</p><ol><li>用新的列布局创建一个新表;</li><li>使用 INSERT SELECT 语句从旧表复制数据到新表。有必要的话，可以使用转换函数和计算字段；</li><li>检验包含所需数据的新表;</li><li>重命名旧表(如果确定，可以删除它);</li><li>用旧表原来的名字重命名新表;</li><li>根据需要，重新创建触发器、存储过程、索引和外键。</li></ol><h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><p>视图：</p><ul><li>视图为虚拟的表。</li><li>它们包含的不是数据而是根据需要检索数据的查询。</li><li>视图提供了一种封装 SELECT 语句的层次，可用来简化数据处理，重新格式化或保护基础数据。</li></ul><p>视图常见应用：</p><ul><li>重用 SQL 语句。</li><li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道 其基本查询细节。</li><li>使用表的一部分而不是整个表。</li><li>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 举例说明 */</span></span><br><span class="line"><span class="comment">-- 联结方式</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 视图方式</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> ProductCustomers   <span class="comment">-- 视图，代表的不是数据，而是一个查询。</span></span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建视图 - 利用视图简化复杂的联结 */</span></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ProductCustomers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id </span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> ProductCustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建视图 - 用视图重新格式化检索出的数据 */</span></span><br><span class="line"><span class="comment">-- SELECT时格式化</span></span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(vend_name) <span class="operator">+</span> <span class="string">&#x27; (&#x27;</span> <span class="operator">+</span> RTRIM(vend_country) <span class="operator">+</span> <span class="string">&#x27;)&#x27;</span> </span><br><span class="line"><span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在视图内格式化</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VendorLocations <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(vend_name) <span class="operator">+</span> <span class="string">&#x27; (&#x27;</span> <span class="operator">+</span> RTRIM(vend_country) <span class="operator">+</span> <span class="string">&#x27;)&#x27;</span></span><br><span class="line">       <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建视图 - 用视图过滤不想要的数据 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CustomerEMailList <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_id, cust_name, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建视图 - 使用视图与计算字段 */</span></span><br><span class="line"><span class="comment">-- 原始查询</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_id,</span><br><span class="line">       quantity,</span><br><span class="line"> item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> OrderItemsExpanded <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> order_num,</span><br><span class="line">       prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">   item_price,</span><br><span class="line">       quantity<span class="operator">*</span>item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems;</span><br><span class="line"><span class="comment">-- 使用视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> OrderItemsExpanded </span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><p>存储过程相对会比较复杂些，书上也没有详细的介绍。</p><p>我理解的存储过程，就是在一个业务场景中，单个的SQL语句无法完成任务，需要对业务涉及到的多条SQL语句进行封装，抽出一个函数形式的API。</p><p>好处就是封装之后执行相对简单了，而且开发人员使用同样的步骤，保证了数据一致，减少错误发生的概率。</p><h2 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h2><p>使用事务处理(transaction processing)，通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性。</p><p>事务处理用来管理：INSERT语句、UPDATE语句、DELETE语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 事务开始和结束 */</span></span><br><span class="line"><span class="comment">-- SQL Server</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRANSACTION </span><br><span class="line">...</span><br><span class="line"><span class="keyword">COMMIT</span> TRANSACTION</span><br><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ROLLBACK */</span></span><br><span class="line"><span class="comment">-- 用来回退(撤销)SQL语句</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Orders;</span><br><span class="line"><span class="keyword">ROLLBACK</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* COMMIT */</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRANSACTION</span><br><span class="line"><span class="keyword">DELETE</span> OrderItems <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">12345</span> </span><br><span class="line"><span class="keyword">DELETE</span> Orders <span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">12345</span> </span><br><span class="line"><span class="keyword">COMMIT</span> TRANSACTION  <span class="comment">-- 如果其中一条失效，则COMMIT不会提交，保证不会部分删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 保留点 */</span></span><br><span class="line"><span class="comment">-- 使用简单的 ROLLBACK 和 COMMIT 语句，就可以写入或撤销整个事务。</span></span><br><span class="line"><span class="comment">-- 复杂的事务可能需要部分提交或回退。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL Server</span></span><br><span class="line">SAVE TRANSACTION delete1;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ROLLBACK</span> TRANSACTION delete1;</span><br><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 完整的SQL Server事务例子 */</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRANSACTION</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id, cust_name) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1000000010&#x27;</span>, <span class="string">&#x27;Toys Emporium&#x27;</span>);</span><br><span class="line">SAVE TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(order_num, order_date, cust_id) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20100</span>,<span class="string">&#x27;2001/12/1&#x27;</span>,<span class="string">&#x27;1000000010&#x27;</span>);</span><br><span class="line">IF @<span class="variable">@ERROR</span> <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">ROLLBACK</span> TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> OrderItems(order_num, order_item, prod_id, quantity, item_price)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20100</span>, <span class="number">1</span>, <span class="string">&#x27;BR01&#x27;</span>, <span class="number">100</span>, <span class="number">5.49</span>);</span><br><span class="line">IF @<span class="variable">@ERROR</span> <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">ROLLBACK</span> TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> OrderItems(order_num, order_item, prod_id, quantity, item_price)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20100</span>, <span class="number">2</span>, <span class="string">&#x27;BR03&#x27;</span>, <span class="number">100</span>, <span class="number">10.99</span>);</span><br><span class="line">IF @<span class="variable">@ERROR</span> <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">ROLLBACK</span> TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">COMMIT</span> TRANSACTION</span><br><span class="line"><span class="comment">-- 保留点越多越好，越多意味着能够越灵活地进行回退。</span></span><br></pre></td></tr></table></figure><h2 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h2><p>游标就是一种处理结果集的机制，可以定位到结果集的某一行进行处理。用处主要包括：</p><ul><li>定位到结果集中的某一行；</li><li>对当前位置的数据进行读写；</li><li>可以对结果集中的数据单独操作，而不是整行执行相同的操作；</li><li>是面向集合的数据库管理系统和面向行的程序设计之间的桥梁。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建游标 */</span></span><br><span class="line"><span class="keyword">DECLARE</span> CustCursor <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用游标 */</span></span><br><span class="line"><span class="keyword">OPEN</span> <span class="keyword">CURSOR</span> CustCursor</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检索第一行</span></span><br><span class="line"><span class="keyword">DECLARE</span> TYPE CustCursor <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">RETURN</span> Customers<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">DECLARE</span> CustRecord Customers<span class="operator">%</span>ROWTYPE</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">OPEN</span> CustCursor;</span><br><span class="line">    <span class="keyword">FETCH</span> CustCursor <span class="keyword">INTO</span> CustRecord;</span><br><span class="line">    <span class="keyword">CLOSE</span> CustCursor;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 循环处理检索出来的每一行</span></span><br><span class="line"><span class="keyword">DECLARE</span> TYPE CustCursor <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span></span><br><span class="line">    <span class="keyword">RETURN</span> Customers<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">DECLARE</span> CustRecord Customers<span class="operator">%</span>ROWTYPE</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">OPEN</span> CustCursor;</span><br><span class="line">LOOP</span><br><span class="line"><span class="keyword">FETCH</span> CustCursor <span class="keyword">INTO</span> CustRecord; EXIT <span class="keyword">WHEN</span> CustCursor<span class="operator">%</span>NOTFOUND;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">CLOSE</span> CustCursor;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭游标 */</span></span><br><span class="line"><span class="keyword">CLOSE</span> CustCursor</span><br></pre></td></tr></table></figure><h2 id="高级SQL特性"><a href="#高级SQL特性" class="headerlink" title="高级SQL特性"></a>高级SQL特性</h2><p>概念性的内容，不抄书了，可以看书或者看博客。主要包括：</p><ul><li>约束<ul><li>主键：<br>主键是一种特殊的约束，用来保证一列(或一组列)中的值是唯一的，而且永不改动。</li><li>外键：<br>外键是表中的一列，其值必须列在另一表的主键中。外键是保证引用完整性的极其重要部分。</li><li>唯一约束：<br>唯一约束用来保证一列(或一组列)中的数据是唯一的。</li><li>检查约束：<br>检查约束用来保证一列(或一组列)中的数据满足一组指定的条件。</li></ul></li><li>索引：<br>索引用来排序数据以加快搜索和排序操作的速度。</li><li>触发器：<br>触发器是特殊的存储过程，它在特定的数据库活动发生时自动执行。触发器可以与特定表上的 INSERT、UPDATE 和 DELETE 操作(或组合)相关联。</li><li>数据库安全：<br>利用管理机制授予或限制对数据的访问。</li></ul>]]></content>
    
    
    <summary type="html">《SQL必知必会》笔记+代码片段</summary>
    
    
    
    <category term="效率技能" scheme="https://shenxiaohai.me/categories/%E6%95%88%E7%8E%87%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="SQL" scheme="https://shenxiaohai.me/tags/SQL/"/>
    
    <category term="Snippet" scheme="https://shenxiaohai.me/tags/Snippet/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第五期</title>
    <link href="https://shenxiaohai.me/TRA-05/"/>
    <id>https://shenxiaohai.me/TRA-05/</id>
    <published>2021-01-09T22:51:12.000Z</published>
    <updated>2023-03-11T05:03:11.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><p>Dash for macOS &amp; 代码片段管理</p><p>实在憋不出什么可以分享的工作Tip了，归根到底还是工作不努力，学习不认真。自我反省🙋。</p><p>就分享个工具吧，<a href="https://kapeli.com/dash">Dash for macOS</a> 是一个工具，主要有两大功能：API文档浏览和代码片段管理。目前我主要是用来做代码片段管理。</p><p>通过在Dash中设置映射：「缩写」-&gt;「代码片段」，在写代码时输入「缩写」，Dash就能自动替换成「代码片段」，对于使用频率较高的片段，比如打印日志，或者业务中比较固定的片段，就可以很快捷地输出，而不用自己写或者翻代码拷贝。</p><p>确实会有效率的提升。</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="M1-暴打-Intel？——这次的芯片有何不同"><a href="#M1-暴打-Intel？——这次的芯片有何不同" class="headerlink" title="M1 暴打 Intel？——这次的芯片有何不同"></a><a href="https://mp.weixin.qq.com/s/Krmx_mYpDdRGKzN3zs3mYw">M1 暴打 Intel？——这次的芯片有何不同</a></h2><p>之前mark了这篇文章，这周正好看到<a href="https://ethanhuang13.substack.com/p/73">開發者週報 #73</a> 也在讲Macbook Air M1的性能强劲，就看了这篇文章，大概了解一下M1芯片的几个优点。</p><ol><li>用Soc可以解决CPU、GPU、NPU分散且架构不同的问题，提高交流效率。</li><li>利用统一内存架构（UMA）优化掉了都需要通过CPU访问内存的低效率问题。</li><li>通过高度集成，讲物理内存放在处理器旁边，通过减小物理距离来提高内存访问速度，强！</li><li>设置超大缓存来提高读写速度。</li><li>当然，5nm制程显然是功臣。</li></ol><p>缺点：</p><p>缺点就是下单要考虑好到底买多大内存的，这个不好DIY了。哭😭。</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">滑动窗口最大值</a></h2><p><strong>描述：</strong></p><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><p><strong>思路：</strong></p><p>利用优先队列进行找最大值，然后注意最大值不能为当前窗口即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=239 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [239] 滑动窗口最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 利用优先队列</span></span><br><span class="line">        <span class="type">int</span> N = nums.<span class="built_in">size</span>();</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; queue;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(nums[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(queue.<span class="built_in">top</span>().first);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(nums[i], i));</span><br><span class="line">            <span class="keyword">while</span> (queue.<span class="built_in">top</span>().second &lt;= i-k)</span><br><span class="line">            &#123;</span><br><span class="line">                queue.<span class="built_in">pop</span>();    <span class="comment">// 保证队列最大值在窗口内</span></span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(queue.<span class="built_in">top</span>().first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. Dash for macOS. 2. M1芯片. 3. 滑动窗口最大值.</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第四期</title>
    <link href="https://shenxiaohai.me/TRA-04/"/>
    <id>https://shenxiaohai.me/TRA-04/</id>
    <published>2020-12-20T12:38:00.000Z</published>
    <updated>2023-03-11T05:03:56.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="BinaryCookieReader助力Python请求需要Cookie的网页"><a href="#BinaryCookieReader助力Python请求需要Cookie的网页" class="headerlink" title="BinaryCookieReader助力Python请求需要Cookie的网页"></a>BinaryCookieReader助力Python请求需要Cookie的网页</h2><p>最近在用Python写脚本，用来优化工作流程，比如需要转换账号、抓取列表、逐个下载解压、重命名等，这些都可以写个脚本来自动处理，但是有一点卡住的地方就是，网页都需要账号登陆验证，直接用request请求会报Authentication Failed。调研了下，发现有个Satishb3写了个<a href="http://securitylearn.net/wp-content/uploads/tools/iOS/BinaryCookieReader.py">BinaryCookieReader</a>，可以用来读取Safari和iOS应用以二进制文件存储的Cookie，这样就可以在request的时候带上Cookie。当然，需要先用Safari登陆过有cookie才行，不过这是小事。</p><p>优点：网上一些模拟登陆的爬虫用到的Cookie的使用方式，需要自己浏览器找cookie复制粘贴到python脚本里，颇为麻烦。这个就需要一步操作，没有cookie缓存也只需要按照提示打开登陆一遍即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import package</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO <span class="comment">## for Python 2</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO <span class="comment">## for Python 3</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime, gmtime</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> expanduser</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># Safari Cookie路径</span></span><br><span class="line">home = expanduser(<span class="string">&quot;~&quot;</span>)</span><br><span class="line">FilePath= home + <span class="string">&#x27;/Library/Cookies/Cookies.binarycookies&#x27;</span></span><br><span class="line">cookieDict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">binary_file=<span class="built_in">open</span>(FilePath,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;File Not Found :&#x27;</span>+ FilePath)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;请前往「系统偏好设置」-&gt;「安全性与隐私」-&gt;「完全磁盘访问权限」，勾选当前的Terminal，以授权访问Cookie文件&#x27;</span>)</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># BinaryCookieReader读取cookie</span></span><br><span class="line">file_header=binary_file.read(<span class="number">4</span>)                             <span class="comment">#File Magic String:cook </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>(file_header)!=<span class="string">&#x27;cook&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Not a Cookies.binarycookie file&quot;</span>)</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">num_pages=unpack(<span class="string">&#x27;&gt;i&#x27;</span>,binary_file.read(<span class="number">4</span>))[<span class="number">0</span>]               <span class="comment">#Number of pages in the binary file: 4 bytes</span></span><br><span class="line"></span><br><span class="line">page_sizes=[]</span><br><span class="line"><span class="keyword">for</span> np <span class="keyword">in</span> <span class="built_in">range</span>(num_pages):</span><br><span class="line">page_sizes.append(unpack(<span class="string">&#x27;&gt;i&#x27;</span>,binary_file.read(<span class="number">4</span>))[<span class="number">0</span>])  <span class="comment">#Each page size: 4 bytes*number of pages</span></span><br><span class="line"></span><br><span class="line">pages=[]</span><br><span class="line"><span class="keyword">for</span> ps <span class="keyword">in</span> page_sizes:</span><br><span class="line">pages.append(binary_file.read(ps))                      <span class="comment">#Grab individual pages and each page will contain &gt;= one cookie</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> pages:</span><br><span class="line">page=StringIO(page)                                     <span class="comment">#Converts the string to a file. So that we can use read/write operations easily.</span></span><br><span class="line">page.read(<span class="number">4</span>)                                            <span class="comment">#page header: 4 bytes: Always 00000100</span></span><br><span class="line">num_cookies=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,page.read(<span class="number">4</span>))[<span class="number">0</span>]                <span class="comment">#Number of cookies in each page, first 4 bytes after the page header in every page.</span></span><br><span class="line"></span><br><span class="line">cookie_offsets=[]</span><br><span class="line"><span class="keyword">for</span> nc <span class="keyword">in</span> <span class="built_in">range</span>(num_cookies):</span><br><span class="line">cookie_offsets.append(unpack(<span class="string">&#x27;&lt;i&#x27;</span>,page.read(<span class="number">4</span>))[<span class="number">0</span>]) <span class="comment">#Every page contains &gt;= one cookie. Fetch cookie starting point from page starting byte</span></span><br><span class="line"></span><br><span class="line">page.read(<span class="number">4</span>)                                            <span class="comment">#end of page header: Always 00000000</span></span><br><span class="line"></span><br><span class="line">cookie=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> cookie_offsets:</span><br><span class="line">page.seek(offset)                                   <span class="comment">#Move the page pointer to the cookie starting point</span></span><br><span class="line">cookiesize=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,page.read(<span class="number">4</span>))[<span class="number">0</span>]             <span class="comment">#fetch cookie size</span></span><br><span class="line">cookie=StringIO(page.read(cookiesize))              <span class="comment">#read the complete cookie </span></span><br><span class="line"></span><br><span class="line">cookie.read(<span class="number">4</span>)                                      <span class="comment">#unknown</span></span><br><span class="line"></span><br><span class="line">flags=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,cookie.read(<span class="number">4</span>))[<span class="number">0</span>]                <span class="comment">#Cookie flags:  1=secure, 4=httponly, 5=secure+httponly</span></span><br><span class="line">cookie_flags=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> flags==<span class="number">0</span>:</span><br><span class="line">cookie_flags=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> flags==<span class="number">1</span>:</span><br><span class="line">cookie_flags=<span class="string">&#x27;Secure&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> flags==<span class="number">4</span>:</span><br><span class="line">cookie_flags=<span class="string">&#x27;HttpOnly&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> flags==<span class="number">5</span>:</span><br><span class="line">cookie_flags=<span class="string">&#x27;Secure; HttpOnly&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">cookie_flags=<span class="string">&#x27;Unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">cookie.read(<span class="number">4</span>)                                      <span class="comment">#unknown</span></span><br><span class="line"></span><br><span class="line">urloffset=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,cookie.read(<span class="number">4</span>))[<span class="number">0</span>]            <span class="comment">#cookie domain offset from cookie starting point</span></span><br><span class="line">nameoffset=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,cookie.read(<span class="number">4</span>))[<span class="number">0</span>]           <span class="comment">#cookie name offset from cookie starting point</span></span><br><span class="line">pathoffset=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,cookie.read(<span class="number">4</span>))[<span class="number">0</span>]           <span class="comment">#cookie path offset from cookie starting point</span></span><br><span class="line">valueoffset=unpack(<span class="string">&#x27;&lt;i&#x27;</span>,cookie.read(<span class="number">4</span>))[<span class="number">0</span>]          <span class="comment">#cookie value offset from cookie starting point</span></span><br><span class="line"></span><br><span class="line">endofcookie=cookie.read(<span class="number">8</span>)                          <span class="comment">#end of cookie</span></span><br><span class="line">                        </span><br><span class="line">expiry_date_epoch= unpack(<span class="string">&#x27;&lt;d&#x27;</span>,cookie.read(<span class="number">8</span>))[<span class="number">0</span>]+<span class="number">978307200</span>          <span class="comment">#Expiry date is in Mac epoch format: Starts from 1/Jan/2001</span></span><br><span class="line">expiry_date=strftime(<span class="string">&quot;%a, %d %b %Y &quot;</span>,gmtime(expiry_date_epoch))[:-<span class="number">1</span>] <span class="comment">#978307200 is unix epoch of  1/Jan/2001 //[:-1] strips the last space</span></span><br><span class="line"></span><br><span class="line">create_date_epoch=unpack(<span class="string">&#x27;&lt;d&#x27;</span>,cookie.read(<span class="number">8</span>))[<span class="number">0</span>]+<span class="number">978307200</span>           <span class="comment">#Cookies creation time</span></span><br><span class="line">create_date=strftime(<span class="string">&quot;%a, %d %b %Y &quot;</span>,gmtime(create_date_epoch))[:-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#print create_date</span></span><br><span class="line"></span><br><span class="line">cookie.seek(urloffset-<span class="number">4</span>)                            <span class="comment">#fetch domaain value from url offset</span></span><br><span class="line">url=<span class="string">&#x27;&#x27;</span></span><br><span class="line">u=cookie.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> unpack(<span class="string">&#x27;&lt;b&#x27;</span>,u)[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">url=url+<span class="built_in">str</span>(u)</span><br><span class="line">u=cookie.read(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cookie.seek(nameoffset-<span class="number">4</span>)                           <span class="comment">#fetch cookie name from name offset</span></span><br><span class="line">name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">n=cookie.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> unpack(<span class="string">&#x27;&lt;b&#x27;</span>,n)[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">name=name+<span class="built_in">str</span>(n)</span><br><span class="line">n=cookie.read(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cookie.seek(pathoffset-<span class="number">4</span>)                          <span class="comment">#fetch cookie path from path offset</span></span><br><span class="line">path=<span class="string">&#x27;&#x27;</span></span><br><span class="line">pa=cookie.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> unpack(<span class="string">&#x27;&lt;b&#x27;</span>,pa)[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">path=path+<span class="built_in">str</span>(pa)</span><br><span class="line">pa=cookie.read(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cookie.seek(valueoffset-<span class="number">4</span>)                         <span class="comment">#fetch cookie value from value offset</span></span><br><span class="line">value=<span class="string">&#x27;&#x27;</span></span><br><span class="line">va=cookie.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> unpack(<span class="string">&#x27;&lt;b&#x27;</span>,va)[<span class="number">0</span>]!=<span class="number">0</span>:</span><br><span class="line">value=value+<span class="built_in">str</span>(va)</span><br><span class="line">va=cookie.read(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤需要的网址的Cookie</span></span><br><span class="line"><span class="keyword">if</span> url==<span class="string">&quot;.example.com&quot;</span> : </span><br><span class="line"><span class="comment"># print &#x27;Cookie : &#x27;+name+&#x27;=&#x27;+value+&#x27;; domain=&#x27;+url+&#x27;; path=&#x27;+path+&#x27;; &#x27;+&#x27;expires=&#x27;+expiry_date+&#x27;; &#x27;+cookie_flags</span></span><br><span class="line">cookieDict[name] = value</span><br><span class="line"></span><br><span class="line">binary_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印Cookie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cookie信息为:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cookieDict)</span><br><span class="line"><span class="comment"># 没有的话可以提示用Safari打开并登陆下，以保存Cookie</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cookieDict:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;没有www.example.com的cookie信息&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;请使用Safari打开 https://www.example.com ，刷新一下Cookie&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;open -a Safari https://www.example.com/&#x27;</span>)</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Cookie发起请求</span></span><br><span class="line">resp = requests.get(example_url, cookies = cookieDict)</span><br><span class="line"><span class="comment"># 接下来处理response即可...........</span></span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="Develop-Apps-with-SwiftUI"><a href="#Develop-Apps-with-SwiftUI" class="headerlink" title="Develop Apps with SwiftUI"></a><a href="https://developer.apple.com/tutorials/app-dev-training">Develop Apps with SwiftUI</a></h2><p>Apple出的SwiftUI构建App教程，共分为8个章节，耗时约4Hr，当然学的时候肯定不止。教程引导创建一个名字叫「Scrumdinger」的app，用来管理Scrum。</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678511035/blog/weqi2okxduwzi9rxyn7w.jpg" alt="SwiftUI 教程"></p><p>八个部分的内容分别为：</p><ol><li>为App创建一个自适应用户界面，添加和修改视图，然后改进app的可访问性accessibility；</li><li>为App构建视图层次结构的同时，了解常见的语言模式和Core Framework；</li><li>为App建立一个导航层次结构，呈现一个自己导航堆栈的modal view；</li><li>传递数据，使用Binding来保持视图之间的数据同步；</li><li>状态管理，让app动态响应变化，创建一个鲁棒的scrum模型，并在app中使用它；</li><li>持久化数据；</li><li>绘图：绘制2D形状以创建显示会议进度的进度环；</li><li>录音：在请求访问用户的硬件或敏感数据时遵用用户的隐私。录制音频并将其转录为文本。</li></ol><p>这个教程手把手教，还是官方出品，比较nice。</p><p>其实还有一份SwiftUI教程，<a href="https://www.notion.so/shenxiaohai/Introducing-SwiftUI-a210cd4262ab463da72bc7b6f48b32cb#91a4bb5aed5d42e081533d66ea1baf33">Introducing SwiftUI</a> ，也比较推荐，已经放入清单里了。</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="最长连续序列"><a href="#最长连续序列" class="headerlink" title="最长连续序列"></a><a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/">最长连续序列</a></h2><p><strong>描述：</strong></p><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p><strong>进阶：</strong>你可以设计并实现时间复杂度为 <code>O(n)</code> 的解决方案吗？</p><p><strong>思路：</strong></p><p>空间换时间。构建哈希表进行统计，再遍历最大区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=128 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [128] 最长连续序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; hashSet;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            hashSet.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> max_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : hashSet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hashSet.<span class="built_in">count</span>(num<span class="number">-1</span>))<span class="comment">// 只摘取左边界进行处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> max_num = num;</span><br><span class="line">                <span class="keyword">while</span> (hashSet.<span class="built_in">count</span>(max_num))</span><br><span class="line">                &#123;</span><br><span class="line">                    max_num++;</span><br><span class="line">                &#125;</span><br><span class="line">                max_len = <span class="built_in">max</span>(max_len, max_num-num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. 用Cookie进行数据抓取. 2. Apple SwiftUI 教程. 3. 最长连续序列.</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="Python" scheme="https://shenxiaohai.me/tags/Python/"/>
    
    <category term="SwiftUI" scheme="https://shenxiaohai.me/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第三期</title>
    <link href="https://shenxiaohai.me/TRA-03/"/>
    <id>https://shenxiaohai.me/TRA-03/</id>
    <published>2020-11-29T21:35:54.000Z</published>
    <updated>2023-03-11T05:03:56.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="Amazon-EC2-Mac-Instances「AWS-支持macOS系统实例了」"><a href="#Amazon-EC2-Mac-Instances「AWS-支持macOS系统实例了」" class="headerlink" title="Amazon EC2 Mac Instances「AWS 支持macOS系统实例了」"></a>Amazon EC2 Mac Instances「AWS 支持macOS系统实例了」</h2><p>AWS官网介绍：<a href="https://aws.amazon.com/cn/ec2/instance-types/mac/">Develop, build, test, and sign Apple apps on Amazon EC2</a></p><p>AWS支持EC2 Mac实例，表示以后开发人员可以随时随地通过云端访问macOS环境。目前是由Mac Mini搭建的，支持Mojave10.14，Catalina10.15系统，将推出Big Sur11.0系统。<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html#mac-instance-launch">用户指南</a>在这里。</p><p>之前还有另外一家macOS云解决方案供应商，<a href="https://www.macstadium.com/">MacStadium</a>。</p><p>关于云端macOS持续集成的选择，PSPDF有一篇文章：<a href="https://pspdfkit.com/blog/2020/managing-macos-hardware-virtualization-or-bare-metal/?utm_source=twitter&utm_medium=social&utm_campaign=blog&utm_content=testing">Managing macOS Hardware: Virtualization or Bare Metal?</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="What-went-wrong-with-the-libdispatch-A-tale-of-caution-for-the-future-of-concurrency"><a href="#What-went-wrong-with-the-libdispatch-A-tale-of-caution-for-the-future-of-concurrency" class="headerlink" title="What went wrong with the libdispatch. A tale of caution for the future of concurrency"></a><a href="https://tclementdev.com/posts/what_went_wrong_with_the_libdispatch.html">What went wrong with the libdispatch. A tale of caution for the future of concurrency</a></h2><p>摩尔定律失效的时代，CPU主频提升困难，芯片制造商更倾向于在同一块芯片上安装更多内核。开发人员需要通过多线程利用多核的优势，同时Apple 发布了libdispatch即GCD，大大降低了使用多线程的难度。但是作者<a href="https://twitter.com/tclementdev">tclementdev</a>提出来，正是这种便捷，会引起一些糟糕的事情：</p><ol><li>线程爆炸，线程数目远远大于机器内核数目。</li><li>异步调用导致的代码难以阅读和Bug调试。</li><li>将一些小任务进行异步化，派发到队列中，会造成资源浪费。</li></ol><p>其实作者想强调的是，当多线程使用太方便时，程序员不再认真思考创建线程是否有意义，不再仔细考虑程序设计。实际上，需要仔细考虑队列，节制地使用异步操作，将线程的数量减少到一个合理的数目。</p><p>文章里提到了在Swift邮件列表中有libdispatch维护者与swift编译器工程师的讨论，(<a href="https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/date.html">page 1</a>, <a href="https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170904/date.html">page 2</a>) ，有一些libdispatch的使用建议和解释。作者总结在gist上，<a href="https://gist.github.com/tclementdev/6af616354912b0347cdf6db159c37057#file-libdispatch-efficiency-tips-md"><strong>libdispatch-efficiency-tips.md</strong></a>。</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/description/">盛最多水的容器</a></h2><p><strong>描述：</strong></p><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，a``n</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p><strong>思路：</strong></p><p>双指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=11 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [11] 盛最多水的容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = height.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> max_res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp = <span class="built_in">min</span>(height[i], height[j]) * (j-i);</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; max_res)</span><br><span class="line">            &#123;</span><br><span class="line">                max_res = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 双指针，容积由较小值和长度决定。考虑到移动较大值是不会增加容积，故移动较小值来减小问题边界</span></span><br><span class="line">            <span class="keyword">if</span> (height[i]&lt;height[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">maxArea</span>(<span class="keyword">_</span> <span class="params">height</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> j<span class="operator">=</span>height.count<span class="operator">-</span><span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> max_res <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> i<span class="operator">&lt;</span>j &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp <span class="operator">=</span> <span class="built_in">min</span>(height[i], height[j]) <span class="operator">*</span> (j<span class="operator">-</span>i);</span><br><span class="line">            <span class="keyword">if</span> tmp<span class="operator">&gt;</span>max_res &#123;</span><br><span class="line">                max_res <span class="operator">=</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> height[i]<span class="operator">&lt;</span>height[j] &#123;</span><br><span class="line">                i<span class="operator">+=</span><span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j<span class="operator">-=</span><span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. AWS Mac 2. libdispatch 3. 盛最多水的容器</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="CI" scheme="https://shenxiaohai.me/tags/CI/"/>
    
    <category term="libdispatch" scheme="https://shenxiaohai.me/tags/libdispatch/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第二期</title>
    <link href="https://shenxiaohai.me/TRA-02/"/>
    <id>https://shenxiaohai.me/TRA-02/</id>
    <published>2020-11-22T15:51:54.000Z</published>
    <updated>2023-03-11T05:02:28.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="WKWebView内存监控"><a href="#WKWebView内存监控" class="headerlink" title="WKWebView内存监控"></a>WKWebView内存监控</h2><p>WKWebView是多进程组件，会从App内存中分离到单独的进程中。当WKWebView的内存超过系统分配的内存时，WKWebView浏览器会出现崩溃白屏，同时App只会收到系统通知而不是崩溃。</p><p>因为业务中不可避免需要用到WKWebView，这时候需要对其内存监控，但是XCode运行时的App内存并不包含它，只能从<code>other process</code>这一项来大致估计内存占用，最好是通过别的手段来进行查看app内出现的WKWebview进程数和其内存占用。目前了解了两种：</p><ol><li>Instruments。<ol><li>在Instruments的Activity Monitor中，选中要查看的应用，点击红圈开始录制，查看Live Processes面板。</li><li>在下方的过滤栏中搜索apple.Webkit，就能过滤出当前应用内的Webkit进程。然后查看对应的内存占用信息。</li></ol></li><li>Safari开发者选项。<ol><li>打开Safari 开发选项，选择对应WKWeb网页，选择「时间线」面板，点击「编辑」并勾选「内存」这一项。</li><li>点击红色圆点开始录制，然后查看到该WKWeb网页的内存占用，可以具体到JavaScript、图像、页面等的分别占用情况。</li></ol></li></ol><p>两者可以结合着一起看，虽然前者指的是WebKit进程的内存，后者指的是WKWebView当前页面的内存占用。</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509796/blog/c6rwhnvuc5kqgyjq14oj.png" alt="Instruments"></p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509797/blog/j4q9bcep9xg0b7ktijqe.png" alt="Safari"></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="Instruments-Tutorial-Getting-Started「Instruments入门教程」"><a href="#Instruments-Tutorial-Getting-Started「Instruments入门教程」" class="headerlink" title="Instruments Tutorial: Getting Started「Instruments入门教程」"></a><a href="https://www.raywenderlich.com/4784723-instruments-tutorial-getting-started">Instruments Tutorial: Getting Started</a>「Instruments入门教程」</h2><p>因为最近有需要对App内的Webview进行内存分析，但又不怎么会使用Instruments，就看了这篇raywenderlich上的关于Instruments的教程。</p><p>关于性能分析，Instruments还是比较重要的工具。这篇文章以一个Flicker图片App为Demo，讲了几个性能分析的点，做了些笔记如下：</p><ol><li>「Timer Profiler」分析时间性能：<ol><li>原理：在测量时间间隔内，暂停程序执行，并在每个运行的线程上判断堆栈顶部的方法。以此来推断每个方法的大概时间。</li><li>功能：显示Call Tree，显示一个应用中执行各个方法所花费的时间。</li><li>选项：下方Call Tree的几种选项<ol><li>Separate by State. 按生命周期状态进行分组，用于检查app在什么时间做多少工作。</li><li>Separate by Thread. 按线程进行分离。用于分析哪些县城负责最大量的CPU使用。</li><li>Invert Call Tree. 逆向调用树。用于展示堆栈跟踪的最近的帧。</li><li>Hide System Libraries. 隐藏系统库。只需要关心CPU在自己的代码上花费的时间。</li><li>Flattern Recursion. 铺平递归。用于显示递归函数，即调用自身的函数，在每个堆栈跟踪中只有一个条目，而不是多次。</li><li>Top Functions. 启用该功能，Instruments会将某个功能耗费的时间视为该功能直接所花费的时间的总和，加上该功能调用的方法所花费的时间。用来直接评估哪个部分最耗时。</li></ol></li><li>Tip：如果是本地编译的代码，则可以双击条目，会跳转代码，然后再点击右上角的Xcode按钮，则会跳转到项目中。</li></ol></li><li>「Allocations」内存泄露分析：<ol><li>内存泄漏的两种类型<ol><li><strong>真正的内存泄漏</strong>：当对象不再被任何对象引用时，仍然被分配了内存。这段内存就一直都不能被重复利用。比如即使有ARC，但是当两个对象彼此保持强引用时，就能够阻止释放另外一个对象，发生内存泄漏。</li><li><strong>无限的内存增长</strong>：连续分配内存且从来不进行释放，会耗尽内存。iOS上，系统会终止App。</li></ol></li><li>Allocations能够提供程序创建的所有对象的详细信息和对应内存，以及每个对象的retain count。</li><li>【Generation Analysis】：打点分析。点击下方「Mark Generation」,面板会插红旗🚩。多次执行一个操作，并进行Mark，然后查看内存是否义无限的方式增长「Growth」。对Growth进行排序，有针对性的对增长最严重的地方进行分析。</li><li>【模拟内存警告⚠️】：使用方式 Instruments - Document - Simulate Memory Warning。然后在代码中对<code>didReceiveMemoryWarningNotification</code>进行内存释放。</li><li>同 Timer Profile，可以点开详细的信息，并跳转到自己的代码。</li></ol></li><li>「Allocations」强引用分析：<ol><li>Allocations 面板中有 #Persistent 和 #Transient 两列， #Persistent 计算当前存在于内存中的每中类型的对象数，#Transient显示已存在但是已经被释放的对象数。前者占用了内存，后者则没有。</li><li>可以通过进入退出进入退出，然后查看引用计数，就可以分析出哪些对象是被保持了强引用。</li><li>Xcode中有Visual Memory Debugger，可以用来诊断内存泄露和Retain Count。</li></ol></li><li>「Visual Memory Debugger」<ol><li>前提设置：Xcode scheme editor - <em>Diagnostics</em> - <em>Malloc Stack</em>  - <em>Live Allocations Only</em></li><li>多执行几次操作，在Debug 导航器中观察。</li><li>Visual Memory Debugger 会暂停应用，并显示当前内存中对象的可视化表示和它们之间的引用。<ol><li>左侧边栏「Heap contents 堆内容」，显示应用暂停时内存中分配的所有类型和实例。小数字表示内存中该类型实例的数目。</li><li>主窗口「Memory Graph 内存图表」，显示内存中对象的视觉表示。对象之间的箭头表示它们之间的引用关系（强&#x2F;弱）。</li><li>右侧边栏「Memory Inspector 内存检查器」，包括类名和层次结构等细节，以及引用是强引用还是弱引用。</li></ol></li></ol></li></ol><p>像Instruments这种性能测试工具，本身应该成为日常开发流程中的一部分，通过在发布前运行Instruments，确保已经尽可能多地捕捉到内存管理和性能上的问题。</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode-cn.com/problems/spiral-matrix/">54. 螺旋矩阵</a></h2><p><strong>描述：</strong></p><p>给定一个包含 <em>m</em> x <em>n</em> 个元素的矩阵（<em>m</em> 行, <em>n</em> 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p><strong>思路：</strong></p><p>处理好上下左右边界值，以及处理好终止条件。</p><p>时间复杂度：O(<em>mn</em>)</p><p>空间复杂度：O(1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = matrix[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>, top = <span class="number">0</span>, bottom = matrix.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right || top &lt;= bottom) &#123;</span><br><span class="line">            <span class="comment">// left2right</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=left;i&lt;=right;i++)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[top][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            top += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (top &gt; bottom) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// top2bottom</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=top;i&lt;=bottom;i++)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            right -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//  right2left</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=right;i&gt;=left;i--)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[bottom][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            bottom -=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (bottom &lt; top) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// bottom2top</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=bottom;i&gt;=top;i--)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            left += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (left &gt; right) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以后开始尝试用Swift刷题，多了解了解基本数据结构的用法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">spiralOrder</span>(<span class="keyword">_</span> <span class="params">matrix</span>: [[<span class="type">Int</span>]]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> <span class="number">0</span>, right <span class="operator">=</span> matrix[<span class="number">0</span>].count <span class="operator">-</span> <span class="number">1</span>, top <span class="operator">=</span> <span class="number">0</span>, bottom <span class="operator">=</span> matrix.count<span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> res <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">while</span>(left <span class="operator">&lt;=</span> right <span class="operator">||</span> top <span class="operator">&lt;=</span> bottom) &#123;</span><br><span class="line">            <span class="comment">// left2right</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> left<span class="operator">...</span>right &#123;</span><br><span class="line">                res.append(matrix[top][i])</span><br><span class="line">            &#125;</span><br><span class="line">            top <span class="operator">=</span> top <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (top <span class="operator">&gt;</span> bottom) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// top2bottom</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> top<span class="operator">...</span>bottom &#123;</span><br><span class="line">                res.append(matrix[i][right])</span><br><span class="line">            &#125;</span><br><span class="line">            right <span class="operator">=</span> right <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (right <span class="operator">&lt;</span> left) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//  right2left</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: right, through: left, by: <span class="operator">-</span><span class="number">1</span>) &#123;</span><br><span class="line">                res.append(matrix[bottom][i])</span><br><span class="line">            &#125;</span><br><span class="line">            bottom <span class="operator">=</span> bottom <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(bottom<span class="operator">&lt;</span>top) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// bottom2top</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: bottom, through: top, by: <span class="operator">-</span><span class="number">1</span>) &#123;</span><br><span class="line">                res.append(matrix[i][left])</span><br><span class="line">            &#125;</span><br><span class="line">            left <span class="operator">=</span> left <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(left<span class="operator">&gt;</span>right) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">1. 查看WKWebview进程内存 2.Instruments入门教程 3.螺旋矩阵</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="WKWebView" scheme="https://shenxiaohai.me/tags/WKWebView/"/>
    
    <category term="Instruments" scheme="https://shenxiaohai.me/tags/Instruments/"/>
    
  </entry>
  
  <entry>
    <title>Tip-Review-Algorithm 第一期</title>
    <link href="https://shenxiaohai.me/TRA-01/"/>
    <id>https://shenxiaohai.me/TRA-01/</id>
    <published>2020-11-08T16:48:42.000Z</published>
    <updated>2023-03-11T05:02:28.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="「Debug-Information-Format」设置为-DWARF-提高编译速度"><a href="#「Debug-Information-Format」设置为-DWARF-提高编译速度" class="headerlink" title="「Debug Information Format」设置为 DWARF 提高编译速度"></a>「Debug Information Format」设置为 DWARF 提高编译速度</h2><p>文章出处：<a href="https://mp.weixin.qq.com/s/97h0oeotOpyTc_a-9ZSJtQ">为什么 Debug Information Format 改为 DWARF 可以提高编译速度？</a></p><p><code>DWARF</code>是一种调试信息的存放格式，方便调试的时候，还原运行时的地址成为可读的源码符号和行号。</p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509729/blog/lbx2hx4yhh6vox2ymcq7.jpg" alt="DWARF和的SYM编译生成时机"></p><p><img data-src="https://res.cloudinary.com/dgchmgebr/image/upload/v1678509730/blog/issjqbg3uqi5gp0rrvew.jpg" alt="两种配置的区别"></p><blockquote><p>当我们选择 <code>DWARF</code> 时，其实就已经使用 <code>DWARF</code> 调试描述文件了，所以这个 <code>DWARF</code> 文件依旧会生成；不同的是当选择 <code>DWARF with dSYM</code> 时，Xcode 还会生成一个 dSYM 文件，其中显式包含 <code>DWARF</code> 从而帮助我们根据地址，找到方法符号及信息。</p><p>这也就是为什么要在 <code>release</code> 下要开启 <code>DWARF with dSYM</code> ，因为我们要去映射地址所对应的方法符号，方便我们排查问题。</p></blockquote><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><h2 id="Useful-and-obscure-Foundation-types-in-Swift「了解7种鲜为人知的类型」"><a href="#Useful-and-obscure-Foundation-types-in-Swift「了解7种鲜为人知的类型」" class="headerlink" title="Useful (and obscure!) Foundation types in Swift「了解7种鲜为人知的类型」"></a><a href="https://swiftrocks.com/useful-obscure-foundation-types-in-swift">Useful (and obscure!) Foundation types in Swift</a>「了解7种鲜为人知的类型」</h2><p>这篇文章主要讲了几种Swift <code>Foundation</code>框架中虽然已经提供，但是人们不太了解和使用的基础类型。虽然说平时可能不怎么用到，但是了解了解总是没错的，一方面确实比较有趣，另一方面万一以后有场景需要，则可以避免编写代码了。</p><p>总结如下，代码就不放了：</p><ol><li><p>NSScanner，像C语言中的scanf一样，可以从字符串中取出指定的内容，比如说数字。NSScanner有个过滤机制，可以配置自己想取出的类型。所以这个类可以应用在一些简单的字符串匹配场景中，而不用去设置正则过滤了。</p></li><li><p>NSCountedSet，类如其名，就是带了元素数目统计功能的set类。可以输入一个序列，然后得到统计结果，可以省去写字典key:in管理的功夫。</p></li><li><p>NSCache，这个很有意思，这是一个集合类型，<strong>可以在系统内存不足时，自动从自身删除元素</strong>。虽然说删除的策略不太清楚，但是对于创建条目开销较大的场景，比如说图像的缓存，这就比自己通过字典进行缓存管理方便多了。这个贴个代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ImageDownloader</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> client: <span class="type">HTTPClient</span></span><br><span class="line">    <span class="keyword">let</span> cache <span class="operator">=</span> <span class="type">NSCache</span>&lt;<span class="type">NSString</span>, <span class="type">NSData</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">client</span>: <span class="type">HTTPClient</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.client <span class="operator">=</span> client</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">load</span>(<span class="params">imageUrl</span>: <span class="type">URL</span>, <span class="params">intoImageView</span> <span class="params">imageView</span>: <span class="type">UIImageView</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> key <span class="operator">=</span> imageUrl.absoluteString <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">apply</span>(<span class="params">data</span>: <span class="type">NSData</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> image <span class="operator">=</span> <span class="type">UIImage</span>(data: data <span class="keyword">as</span> <span class="type">Data</span>)</span><br><span class="line">            imageView.image <span class="operator">=</span> image</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cachedData <span class="operator">=</span> cache.object(forKey: key) &#123;</span><br><span class="line">            apply(data: cachedData)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            client.data(from: imageUrl) &#123; data <span class="keyword">in</span></span><br><span class="line">                cache.setObject(data <span class="keyword">as</span> <span class="type">NSData</span>, forKey: key)</span><br><span class="line">                apply(data: data <span class="keyword">as</span> <span class="type">NSData</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NSOrderedSet：跟NSCountedSet相似，是个自带排序功能的Set类。</p></li><li><p>NSByteCountFormatter：formatter，能够字节数目转换成可读性更强的文件大小形式，比如(1024*1024)bytes –&gt;”1 MB”。</p></li><li><p>NSDataDetector：与NSScanner相似，内置功能强大些，比如可以从字符串中检测提取电话号码、网页链接等。</p></li><li><p>CFBinaryHeap：目前Swift标准库还是缺少很多数据结构的，Swift官方最近也宣布了<a href="https://swift.org/blog/swift-algorithms/">「Swift Algorithms」</a>的<a href="https://github.com/apple/swift-algorithms">开源项目</a>来进行补充。作者提到可以用提供的Tree和Heap实现比如CFTree和CFBinaryHeap，来实现一些比如优先级队列等数据结构。但是这是个<code>C CoreFoundation</code>类，并且还没桥接到<code>Foundation</code>，所以需要管理指针。所以作者就推荐了封装好的<a href="https://github.com/matthewcheok/MCBinaryHeap">MCBinaryHeap</a>。</p></li></ol><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="leetcode-238-除自身以外数组的乘积"><a href="#leetcode-238-除自身以外数组的乘积" class="headerlink" title="leetcode 238. 除自身以外数组的乘积"></a><a href="https://leetcode-cn.com/problems/product-of-array-except-self/">leetcode 238. 除自身以外数组的乘积</a></h2><p><strong>描述：</strong></p><p>给你一个长度为 <em>n</em> 的整数数组 <code>nums</code>，其中 <em>n</em> &gt; 1，返回输出数组 <code>output</code> ，其中 <code>output[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积。<br>请<strong>不要使用除法，</strong>且在 O(<em>n</em>) 时间复杂度内完成此题。</p><p><strong>思路：</strong></p><p>构建两个数组，一个用于计算当前索引左边的累计乘积，一个用于计算当前索引右边的累计乘积，然后两个数组对同一索引进行相乘，就得到了除自身以外的数组乘积。时间复杂度: O(<em>n</em>)，空间复杂度: O(<em>n</em>)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sz = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftMultiply</span><span class="params">(sz)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightMultiply</span><span class="params">(sz)</span></span>;</span><br><span class="line"></span><br><span class="line">        leftMultiply[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        rightMultiply[sz<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; sz; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            leftMultiply[i] = leftMultiply[i<span class="number">-1</span>] * nums[i<span class="number">-1</span>];</span><br><span class="line">            rightMultiply[sz<span class="number">-1</span>-i] = rightMultiply[sz-i] * nums[sz-i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            leftMultiply[i] = leftMultiply[i] * rightMultiply[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> leftMultiply;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>VSCode + LeetCode插件刷题真不错，<br><a href="https://github.com/LeetCode-OpenSource/vscode-leetcode">https://github.com/LeetCode-OpenSource/vscode-leetcode</a></p></blockquote>]]></content>
    
    
    <summary type="html">1. DWARF提高编译速度 2. Swift Foundation Types 3.除自身以外数组的乘积</summary>
    
    
    
    <category term="打卡记录" scheme="https://shenxiaohai.me/categories/%E6%89%93%E5%8D%A1%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="TRA" scheme="https://shenxiaohai.me/tags/TRA/"/>
    
    <category term="LeetCode" scheme="https://shenxiaohai.me/tags/LeetCode/"/>
    
    <category term="iOS" scheme="https://shenxiaohai.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://shenxiaohai.me/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>新阶段</title>
    <link href="https://shenxiaohai.me/new-stage/"/>
    <id>https://shenxiaohai.me/new-stage/</id>
    <published>2020-07-25T23:49:17.000Z</published>
    <updated>2023-03-11T05:03:52.786Z</updated>
    
    <content type="html"><![CDATA[<p>日常学习，偶尔跑步，节奏不错，继续加油。</p><p>折腾了好久，把博客样式也改了改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常学习，偶尔跑步，节奏不错，继续加油。&lt;/p&gt;
&lt;p&gt;折腾了好久，把博客样式也改了改。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="工作" scheme="https://shenxiaohai.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>labelme2Datasets</title>
    <link href="https://shenxiaohai.me/labelme2Datasets/"/>
    <id>https://shenxiaohai.me/labelme2Datasets/</id>
    <published>2019-12-09T10:59:21.000Z</published>
    <updated>2023-04-02T11:36:26.520Z</updated>
    
    <content type="html"><![CDATA[<p>自己的写的一组转换脚本。偷懒，直接将README拷贝过来了。</p><p>代码地址：<a href="https://github.com/veraposeidon/labelme2Datasets">labelme2Datasets</a></p><p><img data-src="https://raw.githubusercontent.com/veraposeidon/labelme2Datasets/main/images/logo.png" alt="LOGO"> </p><h1 id="数据集转换脚本（工具向）"><a href="#数据集转换脚本（工具向）" class="headerlink" title="数据集转换脚本（工具向）"></a>数据集转换脚本（工具向）</h1><p><strong>News:</strong> 最近开始论文实验，需要重新整理一下数据集，顺便整理一下这个代码仓库。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>仓库中的脚本用于将Labelme标注的数据转换为PASCAL VOC格式或MS COCO格式的标准数据集，便于直接利用现有的训练框架进行训练。</p><h2 id="标注工具和常见的两种数据集格式"><a href="#标注工具和常见的两种数据集格式" class="headerlink" title="标注工具和常见的两种数据集格式"></a>标注工具和常见的两种数据集格式</h2><p>Labelme是我用的标注工具，对图像进行多种类型的标注，可以直接得到<code>json</code>文件。GitHub地址如下：</p><p><a href="https://github.com/wkentaro/labelme">labelme: Image Polygonal Annotation with Python</a></p><p>PASCAL-VOC和MS-COCO是两个大型的开源数据集，其数据集的标注形式成为了通用的标注方式，常见的视觉模型的训练框架都支持这两种格式的读取，将自己的数据集转换为这两种标注方式，可以避免修改读取数据的代码。</p><p>两种数据集和标注格式的介绍：</p><p><a href="https://arleyzhang.github.io/articles/1dc20586/">目标检测数据集PASCAL VOC简介</a></p><p><a href="https://arleyzhang.github.io/articles/e5b86f16/">目标检测数据集MSCOCO简介</a></p><h2 id="仓库中的代码文件"><a href="#仓库中的代码文件" class="headerlink" title="仓库中的代码文件"></a>仓库中的代码文件</h2><ul><li><p><code>labelme_json_to_dataset.py</code>：演示如何将单个labelme标注的json文件转换为单张图像的数据集。</p><p><strong>用法</strong>  <code>python labelme_json_to_dataset.py [-h] [-o OUT] json_file</code></p><p><strong>举例</strong>  <code>python labelme_json_to_dataset.py test/test_single.json -o test/test_single</code></p></li><li><p><code>bbox_labelme2voc.py</code>：批量处理labelme标注的json文件，转换成VOC格式的数据集。</p></li><li><p><code>split_dataset.py</code>：将VOC数据集中的样本按照比例，分割成训练集和测试集。</p></li><li><p><code>voc_xml2coco_json.py</code>：将VOC数据集转换为COCO数据集。</p></li><li><p><code>segmentation_labelme2voc.py</code>：将labelme标注的json文件转换为VOC文件下下的语义分割标注文件。三种类型，<code>.npy</code>，<code>.png</code>和可视化图像。</p></li><li><p><code>voc_category_statics_and_smiple_oversampling.py</code>：统计VOC数据集的标注数目，并进行简单的过采样处理。<strong>过采样的方法有点简单的，可以用一些过采样算法替代。</strong></p></li><li><p><code>utils.py</code>: 内置一些简单的转换函数。</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/wkentaro/labelme">labelme</a>: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">conda create --name=labelme python=3.6</span><br><span class="line">conda activate labelme</span><br><span class="line">conda install labelme</span><br></pre></td></tr></table></figure><p>其他工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install progressbar2    <span class="comment"># 进度条</span></span><br><span class="line">conda install scikit-learn  <span class="comment"># 用于分割数据集 </span></span><br><span class="line">conda install xmltodict</span><br><span class="line">conda install lxml</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>仓库中的脚本只针对目前本人已有数据的转换，如果有实例分割、语义分割或视频标注等数据，可以参考labelme提供的示例代码进行修改，示例代码演示了这类标注文件如何转换成VOC格式数据集：</p><p><a href="https://github.com/wkentaro/labelme/tree/master/examples">https://github.com/wkentaro/labelme/tree/master/examples</a></p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><h3 id="步骤一：使用Labelme标注数据集"><a href="#步骤一：使用Labelme标注数据集" class="headerlink" title="步骤一：使用Labelme标注数据集"></a>步骤一：使用Labelme标注数据集</h3><ul><li>标注得到一批json文件</li><li>准备好<code>label_names.txt</code>，包含数据集的目标标签，可参考<code>test/label_names.txt</code></li><li>如果有需要进行标签名称转换的，准备好<code>label_dict.txt </code>，可参考<code>test/label_dict.txt</code></li></ul><h3 id="步骤二：转换为VOC风格的数据集"><a href="#步骤二：转换为VOC风格的数据集" class="headerlink" title="步骤二：转换为VOC风格的数据集"></a>步骤二：转换为VOC风格的数据集</h3><p><strong>用法：</strong></p><p><code>python bbox_labelme2voc.py --labels LABELS [--label_dict LABEL_DICT] input_dir output_dir </code></p><ul><li><code>LABELS</code>：<code>label_names.txt</code></li><li><code>LABEL_DICT</code>：<code>label_dict.txt</code></li><li><code>input_dir </code>：json标注文件所在文件夹</li><li><code>output_dir</code>：VOC数据集文件夹</li></ul><p><strong>举例：</strong> </p><p><code>python bbox_labelme2voc.py --labels test/label_names.txt label_dict test/label_dict.txt test/test_jsons test/test_voc</code></p><h3 id="步骤三：分割训练集和测试集"><a href="#步骤三：分割训练集和测试集" class="headerlink" title="步骤三：分割训练集和测试集"></a>步骤三：分割训练集和测试集</h3><p><strong>用法：</strong></p><p><code>python split_dataset.py [--random_state RANDOM_STATE] voc_dir test_ratio</code></p><ul><li><code>voc_dir</code>：VOC数据集根目录，脚本创建</li><li><code>test_ratio</code>：测试集比例</li><li><code>RANDOM_STATE</code>：随机数种子</li></ul><p>训练集和测试集文件在<code>ImageSets/Main</code>文件夹下。</p><p><strong>举例：</strong> </p><p><code>python split_dataset.py test/test_voc 0.35</code></p><h3 id="步骤四：将VOC数据集转换为COCO数据集"><a href="#步骤四：将VOC数据集转换为COCO数据集" class="headerlink" title="步骤四：将VOC数据集转换为COCO数据集"></a>步骤四：将VOC数据集转换为COCO数据集</h3><p><strong>用法：</strong></p><p><code>python voc_xml2coco_json.py voc_dir voc_split coco_dir anno_file</code></p><ul><li><code>voc_dir </code>：VOC数据集根目录</li><li><code>voc_split</code>：训练集或测试集文件名称，例如train或test</li><li><code>coco_dir</code>：COCO数据集根目录，脚本创建</li><li><code>anno_file</code>：与训练集或测试集对应的COCO数据集Json标注文件，保存在<code>coco_dir/annotations</code>文件夹下。</li></ul><p><strong>举例：</strong></p><p><code>python voc_xml2coco_json.py test/test_voc train test/test_coco train.json</code></p><h3 id="自选步骤：Labelme文件转换为语义分割标注数据集"><a href="#自选步骤：Labelme文件转换为语义分割标注数据集" class="headerlink" title="自选步骤：Labelme文件转换为语义分割标注数据集"></a>自选步骤：Labelme文件转换为语义分割标注数据集</h3><p><strong>用法：</strong> </p><p><code>python segmentation_labelme2voc.py seg_labels_file jsons_dir voc_dir </code></p><ul><li><code>seg_labels_file </code>：与标注对应的标签文件</li><li><code>jsons_dir</code>：包含标注文件的文件夹</li><li><code>voc_dir</code>：目标文件夹</li></ul><p><strong>举例：</strong></p><p><code>python segmentation_labelme2voc.py test/label_names.txt test/test_jsons test/test_voc</code></p><h3 id="自选步骤：统计VOC数据集，并进行简单过采样处理"><a href="#自选步骤：统计VOC数据集，并进行简单过采样处理" class="headerlink" title="自选步骤：统计VOC数据集，并进行简单过采样处理"></a>自选步骤：统计VOC数据集，并进行简单过采样处理</h3><p><strong>用法：</strong> </p><p><code>python voc_category_statics_and_smiple_oversampling.py [--save_name SAVE_NAME] voc_dir set </code></p><ul><li><code>voc_dir</code>：VOC数据集根目录</li><li><code>set</code>：数据集名字，比如train，在<code>voc_dir/ImageSets/Main</code>文件夹下</li><li><code>SAVE_NAME</code>：过采样后的数据集保存文件。将保存在<code>voc_dir/ImageSets/Main</code>文件夹下</li></ul>]]></content>
    
    
    <summary type="html">用于将LabelMe标注好的数据转换为VOC格式和COCO格式的数据集。</summary>
    
    
    
    <category term="开源分享" scheme="https://shenxiaohai.me/categories/%E5%BC%80%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="深度学习" scheme="https://shenxiaohai.me/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="labelme" scheme="https://shenxiaohai.me/tags/labelme/"/>
    
    <category term="PASCAL-VOC" scheme="https://shenxiaohai.me/tags/PASCAL-VOC/"/>
    
    <category term="MS_COCO" scheme="https://shenxiaohai.me/tags/MS-COCO/"/>
    
  </entry>
  
  <entry>
    <title>总结总结数据结构和算法不会的题目</title>
    <link href="https://shenxiaohai.me/online-algo-summary/"/>
    <id>https://shenxiaohai.me/online-algo-summary/</id>
    <published>2019-08-24T15:01:28.000Z</published>
    <updated>2023-04-02T11:28:35.239Z</updated>
    
    <content type="html"><![CDATA[<p>经典题目的解题思路和不会的题目总结一下。</p><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>背包问题，看的是《背包问题九讲》，<a href="https://raw.githubusercontent.com/tianyicui/pack/master/V2.pdf">PDF下载</a>，<a href="https://www.kancloud.cn/kancloud/pack/70125">在线看背包问题九讲</a>，<a href="https://www.bilibili.com/video/av33930433/">bilibili ACWing讲解视频</a>。</p><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使价值总和最大。</p><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><p>每种物品仅有一件，可以选择放或不放。</p><p>伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0</span>, <span class="number">0.</span>..V] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to N:</span><br><span class="line"><span class="keyword">for</span> v = Ci to V:</span><br><span class="line">F[i,v] = <span class="built_in">max</span>(F[i-<span class="number">1</span>,V], F[i-<span class="number">1</span>,v-Ci] + Wi)</span><br></pre></td></tr></table></figure><p>时间复杂度O(VN)不能再降了，但是空间复杂度可以优化到O(V)。首先，i只与i-1相关，那就可以降到O(2V)；其次，在每次主循环中我们以v&#x3D;V…Ci的顺序推f[v]，这样才能保证推f[v]时f[v-c[i]]保存的是状态F[i-1,v-Ci] 的值。</p><p>伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0.</span>..V] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to N:</span><br><span class="line"><span class="keyword">for</span> v = V to Ci:</span><br><span class="line">F[v] = <span class="built_in">max</span>(F[V], F[v-Ci] + Wi)</span><br></pre></td></tr></table></figure><p>可以把01背包抽象出处理过程，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># C和W表示一件物品的花费和价值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ZeroOnePack</span>(<span class="params">F, C, W</span>)</span><br><span class="line"><span class="keyword">for</span> v = V to C:</span><br><span class="line">F[v] = <span class="built_in">max</span>(F[V], F[v-C] + W)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 01背包问题可以写成</span></span><br><span class="line">F[<span class="number">0.</span>..V] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to N:</span><br><span class="line">    ZeroOnePack(F, Ci, Wi)</span><br></pre></td></tr></table></figure><p>初始化细节：</p><ul><li>如果要背包恰好装满，则除了F[0]&#x3D;0， 其他均初始化为-∞，可以保证最终F[V]是恰好装满的最优解</li><li>如果只是要价值最大，则都初始化为0</li></ul><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>每种物品有无限件可以用。</p><p>思路一：将多个物品拆成单个物品来用。可以做优化，将花费大于V的先删选出去。</p><p>思路二：将第i种物品拆成费用为$c[i]*2^k$，价值为$w[i]*2^k$的若干物品，当然$k$只需要取遍$c[i]*2^k&lt;&#x3D;V$即可，因为二进制思想，任意数目都可以由二进制数目来组合。</p><p>伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0.</span>..V] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to N:</span><br><span class="line"><span class="keyword">for</span> v = Ci to V:<span class="comment"># 注意此处是从Ci到V,因为多件物品时，可以考虑出现Ci的情况</span></span><br><span class="line">F[v] = <span class="built_in">max</span>(F[V], F[v-Ci] + Wi)</span><br></pre></td></tr></table></figure><p>完全背包可以抽象为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># C和W表示一件物品的花费和价值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CompletePack</span>(<span class="params">F, C, W</span>)</span><br><span class="line"><span class="keyword">for</span> v = C to V:</span><br><span class="line">F[v] = <span class="built_in">max</span>(F[V], F[v-C] + W)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完全背包问题可以写成</span></span><br><span class="line">F[<span class="number">0.</span>..V] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to N:</span><br><span class="line">CompletePack(F, Ci, Wi)</span><br></pre></td></tr></table></figure><h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>可以转换成01背包问题和完全背包问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MultiplePack</span>(<span class="params">F, cost, weight, amount</span>):</span><br><span class="line">    <span class="keyword">if</span>(cost*amount &gt;= V)<span class="comment"># 视作无限数目</span></span><br><span class="line">    CompletePack(F, cost, weight)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">int</span> k=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k&lt;amount: <span class="comment"># 拆分成01背包</span></span><br><span class="line">        ZeroOnePack(F, k*Ci, k*Wi)</span><br><span class="line">        amount = amount-k</span><br><span class="line">        k = k*<span class="number">2</span></span><br><span class="line">     ZeroOnePack(F, amount*cost, amount*weight)<span class="comment"># 拆封成剩下的个数</span></span><br></pre></td></tr></table></figure><h2 id="混合三种背包问题"><a href="#混合三种背包问题" class="headerlink" title="混合三种背包问题"></a>混合三种背包问题</h2><p>就是分类别进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to N:</span><br><span class="line"><span class="keyword">if</span> 属于01背包问题:</span><br><span class="line">ZeroOnePack(F, Ci, Wi)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> 属于 完全背包问题:</span><br><span class="line">CompletePack(F, Ci, Wi)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> 属于多重背包问题:</span><br><span class="line">        MultiplePack(F, Ci,Wi, Ni)</span><br></pre></td></tr></table></figure><h2 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h2><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。</p><p>设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。</p><p>状态变为F[i,v,u]表示前i件物品付出两种费用分别为v和u时可获得的最大价值。状态转移方程是：</p><p>F[i,v,u] &#x3D; max(F[i-1,v,u], F[i-1,v-Ci, u-Di] + Wi)</p><p>按照01背包的优化，可以使用二维数组：当每件物品只可以取一次时，对变量u和v采用逆序循环，当物品有如完全背包问题时采用顺序循环，当物品有如多重背包问题时，就拆分处理。</p><h2 id="分组的背包问题"><a href="#分组的背包问题" class="headerlink" title="分组的背包问题"></a>分组的背包问题</h2><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><p>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设f[k][v]表示前k组物品花费费用v能取得的最大权值，则有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[k][v]=max&#123;f[k-1][v],f[k-1][v-c[i]]+w[i]|物品i属于组k&#125;</span><br></pre></td></tr></table></figure><p>觉得就跟01背包问题很像，只不过这里一组可以看成一个物体</p><p>使用一维数组的伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> to K:</span><br><span class="line"><span class="keyword">for</span> v = V to <span class="number">0</span>:</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">all</span> item i <span class="keyword">in</span> group k:</span><br><span class="line">        F[v] = <span class="built_in">max</span>(F[v], F[v-Ci] + Wi)</span><br></pre></td></tr></table></figure><p>这样三层循环能够保证每一组内的物品最多只有一个会被添加到背包中。</p><p><strong>后面的：有依赖背包问题、泛化物品就不看了，应该笔试面试考不到那里去吧，考到了我再来学</strong></p>]]></content>
    
    
    <summary type="html">失败不是什么丢人的事情，从失败中全无收获才是。</summary>
    
    
    
    <category term="面试总结" scheme="https://shenxiaohai.me/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="笔试" scheme="https://shenxiaohai.me/tags/%E7%AC%94%E8%AF%95/"/>
    
    <category term="数据结构和算法" scheme="https://shenxiaohai.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
